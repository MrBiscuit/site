// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qDNA17RfdgsM73kkELPPxa
// Component: vB_xXPTP5-
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { AspectRatio } from "@chakra-ui/react"; // plasmic-import: haXMqUgpyx/codeComponent
import { Image } from "@chakra-ui/react"; // plasmic-import: --YMCTTQh5/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_outline_to_single_stroke_css from "../outline_to_single_stroke/plasmic_outline_to_single_stroke.module.css"; // plasmic-import: 56iVbBJXbx9hFxysoAGHJC/projectcss
import projectcss from "./plasmic_pro_layout_panel_landing_pgae.module.css"; // plasmic-import: qDNA17RfdgsM73kkELPPxa/projectcss
import sty from "./PlasmicContentCard.module.css"; // plasmic-import: vB_xXPTP5-/css

export type PlasmicContentCard__VariantMembers = {
  padding: "small";
};

export type PlasmicContentCard__VariantsArgs = {
  padding?: SingleChoiceArg<"small">;
};

type VariantPropType = keyof PlasmicContentCard__VariantsArgs;
export const PlasmicContentCard__VariantProps = new Array<VariantPropType>(
  "padding"
);

export type PlasmicContentCard__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicContentCard__ArgsType;
export const PlasmicContentCard__ArgProps = new Array<ArgPropType>("children");

export type PlasmicContentCard__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultContentCardProps {
  children?: React.ReactNode;
  padding?: SingleChoiceArg<"small">;
  className?: string;
}

function PlasmicContentCard__RenderFunc(props: {
  variants: PlasmicContentCard__VariantsArgs;
  args: PlasmicContentCard__ArgsType;
  overrides: PlasmicContentCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_outline_to_single_stroke_css.plasmic_tokens,
        sty.root,
        { [sty.rootpadding_small]: hasVariant(variants, "padding", "small") }
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__kgoaf)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yF1L
                )}
              >
                {"Productivity"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zXlz)}
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__art7H
                )}
                component={Link}
                href={
                  "https://www.figma.com/community/plugin/913055393462842774/Instance-Utils" as const
                }
                id={"" as const}
                platform={"nextjs"}
                target={"_blank" as const}
                title={"Instance Utils" as const}
              >
                <AspectRatio
                  className={classNames(
                    "__wab_instance",
                    sty.aspectRatio__vySty
                  )}
                  ratio={1 as const}
                >
                  <Image
                    className={classNames("__wab_instance", sty.image___34Ek5)}
                    fallbackSrc={"https://via.placeholder.com/150" as const}
                    src={
                      "https://s3-alpha-sig.figma.com/plugins/913055393462842774/32827/88883843/6e977194-67bf-458b-86a1-0f9354f7d6a2-icon?Expires=1664150400&Signature=cfe~kIC6pUeb-bDOMju2gw2-2cvJ6UwpN50enIT7A76xl19AKQ2jQ8QzYmv72UArB~uO8~w8UW-2fL6Hv8SCJe5tqYqLTYA~Rac12Sjx67XKBPp1ZiDmBE2NrlvQI~wGepdxeFEZtFU8pIZKeMJqhkwKOfwykVbqB4pWlV~R4eNszbzZQtcqgqxiPSD-e~NYSIgw75HQVONZ9Y6Psqvp6sYDqxlxA5QJVwBIU2s8DeFkcNXV-So9myPtUSu6Ayrm657C9gTYE76LSeOJCSufpPc1CRk~cbdJIHij-pqfJy~CzXdgmi-FhIRubfJ6tbBDE2s0ECXNKSK8NuV-duzpFQ__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" as const
                    }
                  />
                </AspectRatio>
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__bsQsh
                )}
                component={Link}
                platform={"nextjs"}
              >
                <AspectRatio
                  className={classNames(
                    "__wab_instance",
                    sty.aspectRatio__qk1Bz
                  )}
                  ratio={1 as const}
                >
                  <Image
                    className={classNames("__wab_instance", sty.image__vmvie)}
                    fallbackSrc={"https://via.placeholder.com/150" as const}
                    src={
                      "https://s3-alpha-sig.figma.com/plugins/1065130523685842895/26939/d88a3b75-e2dc-44c5-b899-ca6236ffc0c3-icon?Expires=1664150400&Signature=PInVfbNzlxUWY1vdV4sIHXZuXDW5I6V2Uoqxg3cjJdn81Wy6UYZYwWNnS~kHSnRO674wObbRtG~beSwrUulifDO7GK90aEV3m3XFhHPJCzpUDSTu2-l8hCpJ0cn07xxK3BzrkUs3wLjwxghbtgLvT1KRXSnwJuXTwsR1Er-f5UTtQmLC213CzcDswhK3ShgKd7wAS9vR76iWu0koNDEqv9jjGPXmwxEJcc14PjhfwkM8bAEfxx0SCT9jQdiSJYm0ENCIRqZmJGg1~7npixK4QQritc-XKhsl1hIly6p~VcqxLIdm1zwdc1clMIsNpqVtG3d8Scxrfhx5cHHdO0rNJg__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" as const
                    }
                  />
                </AspectRatio>
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__mq99K
                )}
                component={Link}
                platform={"nextjs"}
              >
                <AspectRatio
                  className={classNames(
                    "__wab_instance",
                    sty.aspectRatio__qAxHl
                  )}
                  ratio={1 as const}
                >
                  <Image
                    className={classNames("__wab_instance", sty.image__sPoDv)}
                    fallbackSrc={"https://via.placeholder.com/150" as const}
                    src={
                      "https://s3-alpha-sig.figma.com/plugins/950514102619019349/36177/5a19b706-2c2e-48ce-b6dc-4f420bafd6c1-icon?Expires=1664150400&Signature=Z71d~1FTKSskkLa9x5VOBf~hj-UzycLjVFgDwlkIUEAOHKW~pTisxz~oA18VfIiEP1-7VqVIpaFPsbH7BhYapwAabjjNCAC0NzSfxWGrRExK1MAvc5No0n6bf39c3xOqhPQsq3KvvkkivViSRV5y1gpkF6XexHPqW3n~J-IsdFwxxm8SpoM5DTp7XGI92ngvg4Ha3P8LYJSySW4vsD7K66v9ELPKHx7vKfFQYDC429QjbhYajFgDOQWlprKj-KP8a8LFyYWKNyQ~9x8jkjRly~c4ReaBa4di3ihrF8LW7Z5dKrZ0NzId6AQEBOaWsWBSaBD-IoFXGh7PgtA2X9EPmg__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" as const
                    }
                  />
                </AspectRatio>
              </p.PlasmicLink>
            </p.Stack>
          </React.Fragment>
        ),
        value: args.children
      })}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContentCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContentCard__VariantsArgs;
    args?: PlasmicContentCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContentCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicContentCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicContentCard__ArgProps,
          internalVariantPropNames: PlasmicContentCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicContentCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContentCard";
  } else {
    func.displayName = `PlasmicContentCard.${nodeName}`;
  }
  return func;
}

export const PlasmicContentCard = Object.assign(
  // Top-level PlasmicContentCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicContentCard
    internalVariantProps: PlasmicContentCard__VariantProps,
    internalArgProps: PlasmicContentCard__ArgProps
  }
);

export default PlasmicContentCard;
/* prettier-ignore-end */
