// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qDNA17RfdgsM73kkELPPxa
// Component: BsdlwyCaZe
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import { Text } from "@chakra-ui/react"; // plasmic-import: GwrfPQ0Lynu/codeComponent
import { Typewriter } from "react-simple-typewriter"; // plasmic-import: _wC7mwePtk/codeComponent
import { Loop } from "../../Loop"; // plasmic-import: IeAlCi-lqq/codeComponent
import SuperEllipseButton from "../../SuperEllipseButton"; // plasmic-import: BydexUicCD/component
import SideLink from "../../SideLink"; // plasmic-import: Erbgmri1tY/component
import { SuperEllipse } from "react-superellipse"; // plasmic-import: tA0fNNo2idi/codeComponent
import { CountUp } from "react-countup"; // plasmic-import: O2N6ZlMyi7/codeComponent
import ContentCard from "../../ContentCard"; // plasmic-import: vB_xXPTP5-/component
import Plugin from "../../Plugin"; // plasmic-import: z9E_OoSoFq/component
import { AspectRatio } from "@chakra-ui/react"; // plasmic-import: haXMqUgpyx/codeComponent
import { Image } from "@chakra-ui/react"; // plasmic-import: --YMCTTQh5/codeComponent
import YouTube from "@plasmicpkgs/react-youtube"; // plasmic-import: CHO21V9uYw/codeComponent

import { useScreenVariants as useScreenVariants_3KhhFf1Cq1Qfos } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 3KhhFf1CQ1QFOS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_outline_to_single_stroke_css from "../outline_to_single_stroke/plasmic_outline_to_single_stroke.module.css"; // plasmic-import: 56iVbBJXbx9hFxysoAGHJC/projectcss
import projectcss from "./plasmic_pro_layout_panel_landing_pgae.module.css"; // plasmic-import: qDNA17RfdgsM73kkELPPxa/projectcss
import sty from "./PlasmicNewPage.module.css"; // plasmic-import: BsdlwyCaZe/css

import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: jvTcjjoy6l/icon
import Vector23Icon from "./icons/PlasmicIcon__Vector23"; // plasmic-import: MI4L7wd1up/icon
import Vector24Icon from "./icons/PlasmicIcon__Vector24"; // plasmic-import: oniAQRJiOR/icon
import Vector25Icon from "./icons/PlasmicIcon__Vector25"; // plasmic-import: LcQUNQGhls/icon
import Vector27Icon from "./icons/PlasmicIcon__Vector27"; // plasmic-import: icQLjg-8Zy/icon
import Vector32Icon from "./icons/PlasmicIcon__Vector32"; // plasmic-import: L3sOXztzUd/icon
import Vector28Icon from "./icons/PlasmicIcon__Vector28"; // plasmic-import: NWX4ZwoBxj/icon
import PawIcon from "./icons/PlasmicIcon__Paw"; // plasmic-import: qCXPl09GbpV/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: GuzYVTPwfz/icon
import ExtTypeSomethingIcon from "./icons/PlasmicIcon__ExtTypeSomething"; // plasmic-import: ZIGopSivYeQ/icon
import JsIcon from "./icons/PlasmicIcon__Js"; // plasmic-import: _li5UmR3EHI/icon
import Vector19Icon from "./icons/PlasmicIcon__Vector19"; // plasmic-import: KN1g5LXUG/icon
import Vector20Icon from "./icons/PlasmicIcon__Vector20"; // plasmic-import: e7GgmjrOGT/icon
import Vector29Icon from "./icons/PlasmicIcon__Vector29"; // plasmic-import: aOaPmAzV3E/icon
import Vector30Icon from "./icons/PlasmicIcon__Vector30"; // plasmic-import: rZqnz2TPLr/icon
import Vector31Icon from "./icons/PlasmicIcon__Vector31"; // plasmic-import: CPUa3iJHbg/icon
import Blob5Icon from "./icons/PlasmicIcon__Blob5"; // plasmic-import: 0eUqFKVCbB/icon
import Blob4Icon from "./icons/PlasmicIcon__Blob4"; // plasmic-import: bJDNy1ealf/icon
import Blob3Icon from "./icons/PlasmicIcon__Blob3"; // plasmic-import: 8gOKlW3G9D/icon
import Blob2Icon from "./icons/PlasmicIcon__Blob2"; // plasmic-import: 9D2b_uWVGA/icon
import BlobIcon from "./icons/PlasmicIcon__Blob"; // plasmic-import: 1KE4JPl4A8/icon
import Group955Icon from "./icons/PlasmicIcon__Group955"; // plasmic-import: DMOvItYxqx/icon
import Vector22Icon from "./icons/PlasmicIcon__Vector22"; // plasmic-import: 2iBZsGs4KF/icon

export type PlasmicNewPage__VariantMembers = {};

export type PlasmicNewPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage__VariantsArgs;
export const PlasmicNewPage__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage__ArgsType;
export const PlasmicNewPage__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"div">;
  left?: p.Flex<"div">;
  frame1225?: p.Flex<"div">;
  right2?: p.Flex<"div">;
  frame1187?: p.Flex<"div">;
  _?: p.Flex<"div">;
  hero?: p.Flex<"div">;
  leaf?: p.Flex<typeof Reveal>;
  image19?: p.Flex<"div">;
  image21?: p.Flex<"div">;
  frame1177?: p.Flex<"div">;
  typewriter?: p.Flex<typeof Typewriter>;
  arrowReveal?: p.Flex<typeof Reveal>;
  right?: p.Flex<"div">;
  background?: p.Flex<typeof p.PlasmicImg>;
  buttonwrap?: p.Flex<"a"> & Partial<LinkProps>;
  frame1181?: p.Flex<"div">;
  frame1176?: p.Flex<"div">;
  frame1178?: p.Flex<"div">;
  frame?: p.Flex<"div">;
  frame1179?: p.Flex<"div">;
  frame1180?: p.Flex<"div">;
  page1?: p.Flex<"div">;
  blackNextjs?: p.Flex<"div">;
  nextBlack?: p.Flex<"div">;
  bgElements?: p.Flex<typeof Reveal>;
  frame956?: p.Flex<"div">;
  image20?: p.Flex<"div">;
  rectangle25?: p.Flex<"div">;
  image17?: p.Flex<"div">;
  side?: p.Flex<"div">;
  separator2?: p.Flex<"div">;
  content?: p.Flex<"div">;
  counters1?: p.Flex<"div">;
  column1?: p.Flex<"div">;
  counter9?: p.Flex<"div">;
  title9?: p.Flex<"div">;
  title10?: p.Flex<"div">;
  column2?: p.Flex<"div">;
  counter7?: p.Flex<"div">;
  title7?: p.Flex<"div">;
  title8?: p.Flex<"div">;
  column3?: p.Flex<"div">;
  counter5?: p.Flex<"div">;
  title5?: p.Flex<"div">;
  title6?: p.Flex<"div">;
  column4?: p.Flex<"div">;
  counter3?: p.Flex<"div">;
  title3?: p.Flex<"div">;
  title4?: p.Flex<"div">;
  column5?: p.Flex<"div">;
  counter?: p.Flex<"div">;
  title?: p.Flex<"div">;
  title2?: p.Flex<"div">;
  frame1197?: p.Flex<"div">;
  frame1193?: p.Flex<"div">;
  frame1214?: p.Flex<"div">;
  frame1222?: p.Flex<"div">;
  frame1189?: p.Flex<"div">;
  frame1217?: p.Flex<"div">;
  frame1198?: p.Flex<"div">;
  frame1218?: p.Flex<"div">;
  frame1200?: p.Flex<"div">;
  frame1219?: p.Flex<"div">;
  frame1215?: p.Flex<"div">;
  frame1220?: p.Flex<"div">;
  frame1196?: p.Flex<"div">;
  frame1194?: p.Flex<"div">;
  frame1237?: p.Flex<"div">;
  frame1188?: p.Flex<"div">;
  contentCard2?: p.Flex<typeof ContentCard>;
  frame1216?: p.Flex<"div">;
  contentCard3?: p.Flex<typeof ContentCard>;
  frame1223?: p.Flex<"div">;
  arcoDesignSystem2?: p.Flex<"div">;
  contentCard4?: p.Flex<typeof ContentCard>;
  frame1221?: p.Flex<"div">;
  contentCard5?: p.Flex<typeof ContentCard>;
  frame1205?: p.Flex<"div">;
  frame1206?: p.Flex<"div">;
  frame1207?: p.Flex<"div">;
  frame1238?: p.Flex<"div">;
  frame1208?: p.Flex<"div">;
  contentCard6?: p.Flex<typeof ContentCard>;
  frame1210?: p.Flex<"div">;
  rectangle27?: p.Flex<"div">;
  contentCard7?: p.Flex<typeof ContentCard>;
  frame1212?: p.Flex<"div">;
  rectangle28?: p.Flex<"div">;
  contentCard8?: p.Flex<typeof ContentCard>;
  frame1239?: p.Flex<"div">;
  rectangle29?: p.Flex<"div">;
  contentCard9?: p.Flex<typeof ContentCard>;
  frame1252?: p.Flex<"div">;
  rectangle30?: p.Flex<"div">;
  frame1240?: p.Flex<"div">;
  frame1241?: p.Flex<"div">;
  frame1242?: p.Flex<"div">;
  frame1243?: p.Flex<"div">;
  frame1244?: p.Flex<"div">;
  frame1245?: p.Flex<"div">;
  frame1246?: p.Flex<"div">;
  frame1247?: p.Flex<"div">;
  frame1248?: p.Flex<"div">;
  frame1249?: p.Flex<"div">;
  frame1250?: p.Flex<"div">;
  frame1251?: p.Flex<"div">;
  footer?: p.Flex<"div">;
  frame1253?: p.Flex<"div">;
  frame1254?: p.Flex<"div">;
  frame1255?: p.Flex<"div">;
  frame1256?: p.Flex<"div">;
  frame1257?: p.Flex<"div">;
  frame1258?: p.Flex<"div">;
  frame1259?: p.Flex<"div">;
  frame1260?: p.Flex<"div">;
};

export interface DefaultNewPageProps {}

function PlasmicNewPage__RenderFunc(props: {
  variants: PlasmicNewPage__VariantsArgs;
  args: PlasmicNewPage__ArgsType;
  overrides: PlasmicNewPage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_3KhhFf1Cq1Qfos()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_outline_to_single_stroke_css.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            hasGap={true}
            className={classNames(projectcss.all, sty.header)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"left"}
              data-plasmic-override={overrides.left}
              hasGap={true}
              className={classNames(projectcss.all, sty.left)}
            >
              <div
                data-plasmic-name={"frame1225"}
                data-plasmic-override={overrides.frame1225}
                className={classNames(projectcss.all, sty.frame1225)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aTWm
                  )}
                >
                  {"Biscuit.Design"}
                </div>
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"right2"}
              data-plasmic-override={overrides.right2}
              hasGap={true}
              className={classNames(projectcss.all, sty.right2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qJstx
                )}
              >
                {"My Works"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1Tc5D
                )}
              >
                {"About Me"}
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame1187"}
                data-plasmic-override={overrides.frame1187}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame1187)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ow7Xv
                  )}
                >
                  {"English"}
                </div>

                <div
                  data-plasmic-name={"_"}
                  data-plasmic-override={overrides._}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty._
                  )}
                >
                  {"| "}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jpQuc
                  )}
                >
                  {"简体中文"}
                </div>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          {true ? (
            <div
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(projectcss.all, sty.hero)}
            >
              <Reveal
                data-plasmic-name={"leaf"}
                data-plasmic-override={overrides.leaf}
                cascade={true}
                className={classNames("__wab_instance", sty.leaf)}
                delay={0 as const}
                direction={"down" as const}
                duration={3000 as const}
                effect={"fade" as const}
                triggerOnce={true}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : true
                ) ? (
                  <div
                    data-plasmic-name={"image19"}
                    data-plasmic-override={overrides.image19}
                    className={classNames(projectcss.all, sty.image19)}
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : true
                ) ? (
                  <div
                    data-plasmic-name={"image21"}
                    data-plasmic-override={overrides.image21}
                    className={classNames(projectcss.all, sty.image21)}
                  />
                ) : null}
              </Reveal>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame1177"}
                data-plasmic-override={overrides.frame1177}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame1177)}
              >
                <Text className={classNames("__wab_instance", sty.text__x8Zqs)}>
                  <Typewriter
                    data-plasmic-name={"typewriter"}
                    data-plasmic-override={overrides.typewriter}
                    className={classNames("__wab_instance", sty.typewriter)}
                    cursorStyle={"|" as const}
                    cursory={true}
                    delaySpeed={1000 as const}
                    deleteSpeed={20 as const}
                    loop={0 as const}
                    typeSpeed={90 as const}
                    words={[
                      "Hi, I'm a\nNext-Gen Professional\nDesign Syetem Architect.",
                      "I Develop\nComposable, Declarative\n& Protocol Oriented DS",
                      "Most of which are\nLarge Scale &\nOpen Sourced Projects",
                      "I make\nProductivity Plugins\nIn Figma.",
                      "I share\nAll my Progress\nOn Twitter,",
                      "I share\nAll my Discoveries\nOn YouTube.",
                      "Will You\nPerhaps want to\nBe my friend? ❤️"
                    ]}
                  />
                </Text>

                <Icon14Icon
                  className={classNames(projectcss.all, sty.svg___5PWv5)}
                  role={"img"}
                />
              </p.Stack>

              <Reveal
                data-plasmic-name={"arrowReveal"}
                data-plasmic-override={overrides.arrowReveal}
                big={true}
                cascade={true}
                className={classNames("__wab_instance", sty.arrowReveal)}
                delay={3250 as const}
                effect={"fade" as const}
                triggerOnce={true}
              >
                <Loop
                  className={classNames("__wab_instance", sty.loop___0Z5Pi)}
                  interval={500 as const}
                  startIndex={1 as const}
                >
                  <Vector23Icon
                    className={classNames(projectcss.all, sty.svg__eAmOu)}
                    role={"img"}
                  />

                  <Vector24Icon
                    className={classNames(projectcss.all, sty.svg__bzmO3)}
                    role={"img"}
                  />

                  <Vector25Icon
                    className={classNames(projectcss.all, sty.svg__ldmyg)}
                    role={"img"}
                  />
                </Loop>

                <Loop
                  className={classNames("__wab_instance", sty.loop__ysz3L)}
                  interval={500 as const}
                  startIndex={0 as const}
                >
                  <Vector27Icon
                    className={classNames(projectcss.all, sty.svg__ib6IQ)}
                    role={"img"}
                  />

                  <Vector32Icon
                    className={classNames(projectcss.all, sty.svg__jkoBa)}
                    role={"img"}
                  />

                  <Vector28Icon
                    className={classNames(projectcss.all, sty.svg__bIlpS)}
                    role={"img"}
                  />
                </Loop>
              </Reveal>

              {true ? (
                <div
                  data-plasmic-name={"right"}
                  data-plasmic-override={overrides.right}
                  className={classNames(projectcss.all, sty.right)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ya3Ik)}
                  >
                    <Reveal
                      big={true}
                      cascade={true}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__e4P18
                      )}
                      delay={1500 as const}
                      direction={"down" as const}
                      effect={"zoom" as const}
                      triggerOnce={true}
                    >
                      {true ? (
                        <p.PlasmicImg
                          data-plasmic-name={"background"}
                          data-plasmic-override={overrides.background}
                          alt={""}
                          className={classNames(sty.background)}
                          displayHeight={"508px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"658px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/pro_layout_panel_landing_pgae/images/image33.svg",
                            fullWidth: 151,
                            fullHeight: 150,
                            aspectRatio: 1.009381
                          }}
                        />
                      ) : null}
                    </Reveal>

                    <Reveal
                      cascade={false}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__reexk
                      )}
                      delay={2250 as const}
                      direction={"down" as const}
                      effect={"bounce" as const}
                      triggerOnce={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__clmmz
                        )}
                      >
                        {"Мг. Бisсuiт"}
                      </div>
                    </Reveal>

                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__r7WGe
                      )}
                      delay={1850 as const}
                      direction={"down" as const}
                      effect={"bounce" as const}
                      triggerOnce={true}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__ckElf)}
                        displayHeight={"428px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"403px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/pro_layout_panel_landing_pgae/images/image31.svg",
                          fullWidth: 141,
                          fullHeight: 150,
                          aspectRatio: 0.942308
                        }}
                      />
                    </Reveal>
                  </div>
                </div>
              ) : null}

              <Reveal
                cascade={true}
                className={classNames("__wab_instance", sty.reveal__aOpBh)}
                delay={3000 as const}
                effect={"fade" as const}
                triggerOnce={true}
              >
                <p.Stack
                  as={p.PlasmicLink}
                  data-plasmic-name={"buttonwrap"}
                  data-plasmic-override={overrides.buttonwrap}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.buttonwrap
                  )}
                  component={Link}
                  href={"https://twitter.com/SShuaiqi" as const}
                  platform={"nextjs"}
                  target={"_blank" as const}
                >
                  <SuperEllipseButton
                    className={classNames(
                      "__wab_instance",
                      sty.superEllipseButton__miHe9
                    )}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__zWE1)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yw93F
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile")
                          ? "Follow me"
                          : "Follow me"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rfNq6
                        )}
                      >
                        <PawIcon
                          className={classNames(projectcss.all, sty.svg__xKnh7)}
                          role={"img"}
                        />
                      </div>
                    </p.Stack>
                  </SuperEllipseButton>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame1181"}
                  data-plasmic-override={overrides.frame1181}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1181)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame1176"}
                    data-plasmic-override={overrides.frame1176}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1176)}
                  >
                    <div
                      data-plasmic-name={"frame1178"}
                      data-plasmic-override={overrides.frame1178}
                      className={classNames(projectcss.all, sty.frame1178)}
                    >
                      <div
                        data-plasmic-name={"frame"}
                        data-plasmic-override={overrides.frame}
                        className={classNames(projectcss.all, sty.frame)}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__mbA5E)}
                          displayHeight={"19.2px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"37.953px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/pro_layout_panel_landing_pgae/images/group2.svg",
                            fullWidth: 37.953,
                            fullHeight: 19.2,
                            aspectRatio: 1.9
                          }}
                        />
                      </div>
                    </div>
                  </p.Stack>

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__xVycu)}
                    displayHeight={"14.399px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"62.4px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/pro_layout_panel_landing_pgae/images/vercel2.svg",
                      fullWidth: 62.4,
                      fullHeight: 14.399,
                      aspectRatio: 4.2
                    }}
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame1179"}
                    data-plasmic-override={overrides.frame1179}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1179)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__e5LA)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xbGvf
                        )}
                      />
                    </div>
                  </p.Stack>

                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sTtQn)}
                    >
                      <Icon12Icon
                        className={classNames(projectcss.all, sty.svg__aZCs)}
                        role={"img"}
                      />
                    </div>
                  ) : null}

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame1180"}
                    data-plasmic-override={overrides.frame1180}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1180)}
                  >
                    <div
                      data-plasmic-name={"page1"}
                      data-plasmic-override={overrides.page1}
                      className={classNames(projectcss.all, sty.page1)}
                    >
                      <div
                        data-plasmic-name={"blackNextjs"}
                        data-plasmic-override={overrides.blackNextjs}
                        className={classNames(projectcss.all, sty.blackNextjs)}
                      >
                        <div
                          data-plasmic-name={"nextBlack"}
                          data-plasmic-override={overrides.nextBlack}
                          className={classNames(projectcss.all, sty.nextBlack)}
                        >
                          <ExtTypeSomethingIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__jdywM
                            )}
                            role={"img"}
                          />

                          <JsIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__q1Qso
                            )}
                            role={"img"}
                          />
                        </div>
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>
              </Reveal>

              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : true
              ) ? (
                <Reveal
                  data-plasmic-name={"bgElements"}
                  data-plasmic-override={overrides.bgElements}
                  cascade={true}
                  className={classNames("__wab_instance", sty.bgElements)}
                  delay={500 as const}
                  triggerOnce={true}
                >
                  <div
                    data-plasmic-name={"frame956"}
                    data-plasmic-override={overrides.frame956}
                    className={classNames(projectcss.all, sty.frame956)}
                  >
                    <div
                      data-plasmic-name={"image20"}
                      data-plasmic-override={overrides.image20}
                      className={classNames(projectcss.all, sty.image20)}
                    />

                    <div
                      data-plasmic-name={"rectangle25"}
                      data-plasmic-override={overrides.rectangle25}
                      className={classNames(projectcss.all, sty.rectangle25)}
                    />
                  </div>

                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      data-plasmic-name={"image17"}
                      data-plasmic-override={overrides.image17}
                      className={classNames(projectcss.all, sty.image17)}
                    />
                  ) : null}
                </Reveal>
              ) : null}
            </div>
          ) : null}

          <p.Stack
            as={"div"}
            data-plasmic-name={"side"}
            data-plasmic-override={overrides.side}
            hasGap={true}
            className={classNames(projectcss.all, sty.side)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___23PRm
              )}
            >
              {"FOLLOW"}
            </div>

            {true ? (
              <SideLink
                className={classNames("__wab_instance", sty.sideLink__cfepg)}
              />
            ) : null}
            {true ? (
              <SideLink
                className={classNames("__wab_instance", sty.sideLink__ySqYd)}
                destination={"https://twitter.com/SShuaiqi" as const}
              >
                <Vector20Icon
                  className={classNames(projectcss.all, sty.svg__l5WpJ)}
                  role={"img"}
                />
              </SideLink>
            ) : null}
            {true ? (
              <SideLink
                className={classNames("__wab_instance", sty.sideLink__m3EiP)}
                destination={
                  "https://www.youtube.com/channel/UCK-Wdz9A5UtgkiHL9a20LpA" as const
                }
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__kq5Fj)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/pro_layout_panel_landing_pgae/images/youtube.svg",
                    fullWidth: 27.512,
                    fullHeight: 19.851,
                    aspectRatio: 1.4
                  }}
                />
              </SideLink>
            ) : null}
          </p.Stack>

          {true ? (
            <div
              data-plasmic-name={"separator2"}
              data-plasmic-override={overrides.separator2}
              className={classNames(projectcss.all, sty.separator2)}
            >
              <Loop
                className={classNames("__wab_instance", sty.loop__dkRdp)}
                interval={500 as const}
                startIndex={0 as const}
              >
                <Vector29Icon
                  className={classNames(projectcss.all, sty.svg__ltPn)}
                  role={"img"}
                />

                <Vector30Icon
                  className={classNames(projectcss.all, sty.svg__kLc7J)}
                  role={"img"}
                />

                <Vector31Icon
                  className={classNames(projectcss.all, sty.svg__aBvuc)}
                  role={"img"}
                />
              </Loop>

              <Loop
                className={classNames("__wab_instance", sty.loop__xaepG)}
                interval={500 as const}
                startIndex={1 as const}
              >
                <Vector29Icon
                  className={classNames(projectcss.all, sty.svg___85WsZ)}
                  role={"img"}
                />

                <Vector30Icon
                  className={classNames(projectcss.all, sty.svg__kLc7J)}
                  role={"img"}
                />

                <Vector31Icon
                  className={classNames(projectcss.all, sty.svg__aBvuc)}
                  role={"img"}
                />
              </Loop>

              <Loop
                className={classNames("__wab_instance", sty.loop___5Bf85)}
                interval={500 as const}
                startIndex={2 as const}
              >
                <Vector29Icon
                  className={classNames(projectcss.all, sty.svg__nKmjC)}
                  role={"img"}
                />

                <Vector30Icon
                  className={classNames(projectcss.all, sty.svg__kLc7J)}
                  role={"img"}
                />

                <Vector31Icon
                  className={classNames(projectcss.all, sty.svg__aBvuc)}
                  role={"img"}
                />
              </Loop>
            </div>
          ) : null}

          <p.Stack
            as={"div"}
            data-plasmic-name={"content"}
            data-plasmic-override={overrides.content}
            hasGap={true}
            className={classNames(projectcss.all, sty.content)}
          >
            <SuperEllipse
              className={classNames("__wab_instance", sty.superEllipse__zYtIx)}
              r1={0 as const}
              r2={0.25 as const}
            >
              <SuperEllipse
                className={classNames(
                  "__wab_instance",
                  sty.superEllipse__oOFew
                )}
                r1={0 as const}
                r2={0.25 as const}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : true
                ) ? (
                  <div
                    data-plasmic-name={"counters1"}
                    data-plasmic-override={overrides.counters1}
                    className={classNames(projectcss.all, sty.counters1)}
                  >
                    <div
                      data-plasmic-name={"column1"}
                      data-plasmic-override={overrides.column1}
                      className={classNames(projectcss.all, sty.column1)}
                    >
                      <Blob5Icon
                        className={classNames(projectcss.all, sty.svg__xX6Js)}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"counter9"}
                        data-plasmic-override={overrides.counter9}
                        className={classNames(projectcss.all, sty.counter9)}
                      >
                        <CountUp
                          className={classNames(
                            "__wab_instance",
                            sty.countUp___77TlA
                          )}
                          decimal={"." as const}
                          decimals={1 as const}
                          delay={1 as const}
                          duration={2.75 as const}
                          enableScrollSpy={true}
                          end={3.4 as const}
                          prefix={"" as const}
                          separator={"," as const}
                          start={0 as const}
                          suffix={"K" as const}
                          useEasing={true}
                        />
                      </div>

                      <div
                        data-plasmic-name={"title9"}
                        data-plasmic-override={overrides.title9}
                        className={classNames(projectcss.all, sty.title9)}
                      >
                        <div
                          data-plasmic-name={"title10"}
                          data-plasmic-override={overrides.title10}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.title10
                          )}
                        >
                          {"Twitter Followers"}
                        </div>
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"column2"}
                      data-plasmic-override={overrides.column2}
                      className={classNames(projectcss.all, sty.column2)}
                    >
                      <Blob4Icon
                        className={classNames(projectcss.all, sty.svg__swCoJ)}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"counter7"}
                        data-plasmic-override={overrides.counter7}
                        className={classNames(projectcss.all, sty.counter7)}
                      >
                        <CountUp
                          className={classNames(
                            "__wab_instance",
                            sty.countUp__eMw4
                          )}
                          decimal={"." as const}
                          decimals={0 as const}
                          delay={1 as const}
                          duration={2.75 as const}
                          enableScrollSpy={true}
                          end={31 as const}
                          prefix={"" as const}
                          separator={"," as const}
                          start={0 as const}
                          suffix={"K" as const}
                          useEasing={true}
                        />
                      </div>

                      <div
                        data-plasmic-name={"title7"}
                        data-plasmic-override={overrides.title7}
                        className={classNames(projectcss.all, sty.title7)}
                      >
                        <div
                          data-plasmic-name={"title8"}
                          data-plasmic-override={overrides.title8}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.title8
                          )}
                        >
                          {"Plugin Installs"}
                        </div>
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"column3"}
                      data-plasmic-override={overrides.column3}
                      className={classNames(projectcss.all, sty.column3)}
                    >
                      <Blob3Icon
                        className={classNames(projectcss.all, sty.svg__qo7Ab)}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"counter5"}
                        data-plasmic-override={overrides.counter5}
                        className={classNames(projectcss.all, sty.counter5)}
                      >
                        <CountUp
                          className={classNames(
                            "__wab_instance",
                            sty.countUp__xnAoS
                          )}
                          decimal={"." as const}
                          decimals={0 as const}
                          delay={1 as const}
                          duration={2.75 as const}
                          enableScrollSpy={true}
                          end={172 as const}
                          prefix={"" as const}
                          separator={"," as const}
                          start={0 as const}
                          suffix={"K" as const}
                          useEasing={true}
                        />
                      </div>

                      <div
                        data-plasmic-name={"title5"}
                        data-plasmic-override={overrides.title5}
                        className={classNames(projectcss.all, sty.title5)}
                      >
                        <div
                          data-plasmic-name={"title6"}
                          data-plasmic-override={overrides.title6}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.title6
                          )}
                        >
                          {"File Duplicates"}
                        </div>
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"column4"}
                      data-plasmic-override={overrides.column4}
                      className={classNames(projectcss.all, sty.column4)}
                    >
                      <Blob2Icon
                        className={classNames(projectcss.all, sty.svg__efxqj)}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"counter3"}
                        data-plasmic-override={overrides.counter3}
                        className={classNames(projectcss.all, sty.counter3)}
                      >
                        <CountUp
                          className={classNames(
                            "__wab_instance",
                            sty.countUp__yCq3
                          )}
                          decimal={"." as const}
                          decimals={1 as const}
                          delay={1 as const}
                          duration={2.75 as const}
                          enableScrollSpy={true}
                          end={3.2 as const}
                          prefix={"" as const}
                          separator={"," as const}
                          start={0 as const}
                          suffix={"K" as const}
                          useEasing={true}
                        />
                      </div>

                      <div
                        data-plasmic-name={"title3"}
                        data-plasmic-override={overrides.title3}
                        className={classNames(projectcss.all, sty.title3)}
                      >
                        <div
                          data-plasmic-name={"title4"}
                          data-plasmic-override={overrides.title4}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.title4
                          )}
                        >
                          {"Figma Followers"}
                        </div>
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"column5"}
                      data-plasmic-override={overrides.column5}
                      className={classNames(projectcss.all, sty.column5)}
                    >
                      <BlobIcon
                        className={classNames(projectcss.all, sty.svg__nfgrp)}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"counter"}
                        data-plasmic-override={overrides.counter}
                        className={classNames(projectcss.all, sty.counter)}
                      >
                        <CountUp
                          className={classNames(
                            "__wab_instance",
                            sty.countUp__khVjo
                          )}
                          decimal={"." as const}
                          decimals={0 as const}
                          delay={1 as const}
                          duration={2.75 as const}
                          enableScrollSpy={true}
                          end={12 as const}
                          prefix={"" as const}
                          separator={"," as const}
                          start={0 as const}
                          suffix={"K" as const}
                          useEasing={true}
                        />
                      </div>

                      <div
                        data-plasmic-name={"title"}
                        data-plasmic-override={overrides.title}
                        className={classNames(projectcss.all, sty.title)}
                      >
                        <div
                          data-plasmic-name={"title2"}
                          data-plasmic-override={overrides.title2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.title2
                          )}
                        >
                          {"Likes"}
                        </div>
                      </div>
                    </div>
                  </div>
                ) : null}
              </SuperEllipse>
            </SuperEllipse>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame1197"}
              data-plasmic-override={overrides.frame1197}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame1197)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__too8Y)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame1193"}
                    data-plasmic-override={overrides.frame1193}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1193)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame1214"}
                      data-plasmic-override={overrides.frame1214}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame1214)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6ZeHr
                        )}
                      >
                        {"Figma Plugins"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zpx05
                        )}
                      >
                        {"Improve productivity"}
                      </div>
                    </p.Stack>

                    {(
                      hasVariant(globalVariants, "screen", "mobile")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__t41XD
                        )}
                      >
                        {"View All »"}
                      </div>
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame1222"}
                    data-plasmic-override={overrides.frame1222}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1222)}
                  >
                    <ContentCard
                      className={classNames(
                        "__wab_instance",
                        sty.contentCard__mM8Jx
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame1189"}
                        data-plasmic-override={overrides.frame1189}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame1189)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__h4TgZ
                          )}
                        >
                          {"Productivity"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame1217"}
                        data-plasmic-override={overrides.frame1217}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame1217)}
                      >
                        <Plugin
                          className={classNames(
                            "__wab_instance",
                            sty.plugin___8Ui7A
                          )}
                          destination={
                            "https://www.figma.com/community/plugin/913055393462842774/Instance-Utils" as const
                          }
                          imgSrc={
                            "https://s3-alpha-sig.figma.com/plugins/913055393462842774/32827/88883843/6e977194-67bf-458b-86a1-0f9354f7d6a2-icon?Expires=1664150400&Signature=cfe~kIC6pUeb-bDOMju2gw2-2cvJ6UwpN50enIT7A76xl19AKQ2jQ8QzYmv72UArB~uO8~w8UW-2fL6Hv8SCJe5tqYqLTYA~Rac12Sjx67XKBPp1ZiDmBE2NrlvQI~wGepdxeFEZtFU8pIZKeMJqhkwKOfwykVbqB4pWlV~R4eNszbzZQtcqgqxiPSD-e~NYSIgw75HQVONZ9Y6Psqvp6sYDqxlxA5QJVwBIU2s8DeFkcNXV-So9myPtUSu6Ayrm657C9gTYE76LSeOJCSufpPc1CRk~cbdJIHij-pqfJy~CzXdgmi-FhIRubfJ6tbBDE2s0ECXNKSK8NuV-duzpFQ__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" as const
                          }
                          startIndex={0 as const}
                        />

                        <Plugin
                          className={classNames(
                            "__wab_instance",
                            sty.plugin__qxeH2
                          )}
                          destination={
                            "https://www.figma.com/community/plugin/913055393462842774/Instance-Utils" as const
                          }
                          imgSrc={
                            "https://s3-alpha-sig.figma.com/plugins/1065130523685842895/26939/d88a3b75-e2dc-44c5-b899-ca6236ffc0c3-icon?Expires=1664150400&Signature=PInVfbNzlxUWY1vdV4sIHXZuXDW5I6V2Uoqxg3cjJdn81Wy6UYZYwWNnS~kHSnRO674wObbRtG~beSwrUulifDO7GK90aEV3m3XFhHPJCzpUDSTu2-l8hCpJ0cn07xxK3BzrkUs3wLjwxghbtgLvT1KRXSnwJuXTwsR1Er-f5UTtQmLC213CzcDswhK3ShgKd7wAS9vR76iWu0koNDEqv9jjGPXmwxEJcc14PjhfwkM8bAEfxx0SCT9jQdiSJYm0ENCIRqZmJGg1~7npixK4QQritc-XKhsl1hIly6p~VcqxLIdm1zwdc1clMIsNpqVtG3d8Scxrfhx5cHHdO0rNJg__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" as const
                          }
                          startIndex={1 as const}
                        />

                        <Plugin
                          className={classNames(
                            "__wab_instance",
                            sty.plugin___0ZyZo
                          )}
                          destination={
                            "https://www.figma.com/community/plugin/950514102619019349" as const
                          }
                          imgSrc={
                            "https://s3-alpha-sig.figma.com/plugins/950514102619019349/36177/5a19b706-2c2e-48ce-b6dc-4f420bafd6c1-icon?Expires=1664150400&Signature=Z71d~1FTKSskkLa9x5VOBf~hj-UzycLjVFgDwlkIUEAOHKW~pTisxz~oA18VfIiEP1-7VqVIpaFPsbH7BhYapwAabjjNCAC0NzSfxWGrRExK1MAvc5No0n6bf39c3xOqhPQsq3KvvkkivViSRV5y1gpkF6XexHPqW3n~J-IsdFwxxm8SpoM5DTp7XGI92ngvg4Ha3P8LYJSySW4vsD7K66v9ELPKHx7vKfFQYDC429QjbhYajFgDOQWlprKj-KP8a8LFyYWKNyQ~9x8jkjRly~c4ReaBa4di3ihrF8LW7Z5dKrZ0NzId6AQEBOaWsWBSaBD-IoFXGh7PgtA2X9EPmg__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" as const
                          }
                          startIndex={2 as const}
                        />
                      </p.Stack>
                    </ContentCard>

                    <ContentCard
                      className={classNames(
                        "__wab_instance",
                        sty.contentCard___2NERr
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame1198"}
                        data-plasmic-override={overrides.frame1198}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame1198)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lGmd
                          )}
                        >
                          {"Layer Selection"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame1218"}
                        data-plasmic-override={overrides.frame1218}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame1218)}
                      >
                        <Plugin
                          className={classNames(
                            "__wab_instance",
                            sty.plugin__gYccd
                          )}
                          destination={
                            "https://www.figma.com/community/plugin/913055393462842774/Instance-Utils" as const
                          }
                          imgSrc={
                            "https://s3-alpha-sig.figma.com/plugins/1005290003683115208/19996/b6ecad25-a921-4691-90a3-9f8ee2ffb555-icon?Expires=1664150400&Signature=Po0TWVXKPCpuiDA03d-JKIzb3dJ8PvGZoXiA52JizcvFGTFOyNzBZWEo0aBghFykz9v-nOcV9b0xdF5s7zlrIbBouGpMkPUS1uVuarh9tDQ5EQOu9YjmaK~gtqDNp6u6o2cjO0EM7QllvD6afJ1UnTJovmzFVIGQR1PfE42ONFu-R-OsmqfgjfOjCoLYTb2VKJxjD6hMIcSUqZ8liTRkJ25EZKluwTbB30JR9ShS8WKmD6YeJA7i-w1zh3LFPbYmoFRwvfEmBXbeG45bhOvKWqFltKAmvsJ37oix3~elgrZDXhgU4m6kZp3NjoKidfefzRFqX7KOZwOUemwkhKNIZA__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" as const
                          }
                          startIndex={0 as const}
                        />

                        <Plugin
                          className={classNames(
                            "__wab_instance",
                            sty.plugin__ysf5H
                          )}
                          destination={
                            "https://www.figma.com/community/plugin/913055393462842774/Instance-Utils" as const
                          }
                          imgSrc={
                            "https://s3-alpha-sig.figma.com/plugins/986640827067490181/36522/84468237/326ba7ce-c7ee-4c17-9705-0d1b9315bb47-icon?Expires=1664150400&Signature=g-Qash9gQ7w06Rd9fTDvDq3qmvglon9pQcL1Mv6WuUphenYGUo2UgnwiukrB0HJe62Wn1FkMR6YmH69ZAEA~JRZfeE4upp4U0cbTyq-Oy0DpXpkbiagSS7l4n1qhn3XmyUoCeR5U-7li6YTh-zLv8E08qOofZY0TIxav-lTrfS6146DFcbTTtkVMz5EdhpehVabwyiwoYcAQ~Gs9RtQs00Ohzji4xrTkFD94kDetExVkwbu7GaNYMrE0CCO22Yl~9z3co8naSs0rlIjxfvmZ5VMqF2C1Xr0~sghTZ4Yc~AB8Z2cquX~cHhwUT-fKEkZDV97ig-BhicxE~G-piqelsQ__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" as const
                          }
                          startIndex={1 as const}
                        />

                        <Plugin
                          className={classNames(
                            "__wab_instance",
                            sty.plugin__b4Mhi
                          )}
                          destination={
                            "https://www.figma.com/community/plugin/913055393462842774/Instance-Utils" as const
                          }
                          imgSrc={
                            "https://s3-alpha-sig.figma.com/plugins/948944981491521191/14662/a613ad63-a332-42ee-9995-ded2cced588b-icon?Expires=1664150400&Signature=e9t2jq41XxKsFZhrpI9wBcXqKFgHzwK7K8eTIup4-EkemW3FGH~gtA7lGV49vYJAtVELhBorvpBCF1jgPbH~zDMHtQGG12qhiNWjU2Fh-dOMlIXawAD6fs7nEcR64GZaFU0JVzL8nLXJ73~ZxQmbfXNV~KpAHXjdaX-yQXGI7ibYmcZ0BUn7O2o1EsEIcYoHh2J9Xigq5-M3ATcIcGESMYDC5bpL9lZPAQstPcFzZN7s2qPLKOLq0mm7oa04NXDtgwsbOEfWXFkuBH1NxlW4F53z2d0XKjUwYoZ9HI0EjNzlhZWTw8ZnJhPOlFPUix2kBvjFwI-5-bpnEWHBGKDQ6Q__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" as const
                          }
                          startIndex={2 as const}
                        />
                      </p.Stack>
                    </ContentCard>

                    <ContentCard
                      className={classNames(
                        "__wab_instance",
                        sty.contentCard___9Zd71
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame1200"}
                        data-plasmic-override={overrides.frame1200}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame1200)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mkjKj
                          )}
                        >
                          {"Data Visulization"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame1219"}
                        data-plasmic-override={overrides.frame1219}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame1219)}
                      >
                        <Plugin
                          className={classNames(
                            "__wab_instance",
                            sty.plugin__dsCjf
                          )}
                          destination={
                            "https://www.figma.com/community/plugin/913055393462842774/Instance-Utils" as const
                          }
                          imgSrc={
                            "https://s3-alpha-sig.figma.com/plugins/880740985021442025/12412/7f42b78b-fb14-45a0-b845-df83282e9a58-icon?Expires=1664150400&Signature=GGa5iv3r-51VGfeNfekL4z7GzI8vPbNrhdNDJ~izUFTQmmJOK5VjN0gAt85jgM1PQk95WCph6k7DSqBg8RXWOCjROdyzZKFcYzLHyxFKM2Jn5P-xkWppn4Lac~MHidIQvwHzedsmV27y41FpQBuyK8J4PaJg5fDMruNA5Kkyg7hld8-~XXfr3H7WZpz3mFJ1~hPjs74Ta~dBgNGjOze5iertgGGttvk~u2HH1liEcb7u88Rt0RYZ4rhPHKYYCSm1kqzllNO11YU6uCvxU4p0aRxthUu~89Dk6sZh0dFl449gsOBdk9qHWCKnYJyIbL87e2srXqTNP-AgRLkI7N0fyQ__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" as const
                          }
                          startIndex={0 as const}
                        />

                        <Plugin
                          className={classNames(
                            "__wab_instance",
                            sty.plugin___5LZll
                          )}
                          destination={
                            "https://www.figma.com/community/plugin/913055393462842774/Instance-Utils" as const
                          }
                          imgSrc={
                            "https://s3-alpha-sig.figma.com/plugins/991975059967102509/18845/c5aa525c-7c60-4dd4-b8be-f3504e42214a-icon?Expires=1664150400&Signature=GpZ9mnCDgkVl~wFPSVhkkVxJmlSypaEfOTYW9YC2SPFNmXJjupuGgfNO4IRFz~lxOmbVnqsEQCj7hhCuOlRcd3alraiYbJeDSGTF~IF9M8uf-qge-9ICaqcJmvXsUK-TEgcmtdfwApUvntOaZU4iG1p-oLbLaD1YtVXkCdTFYs2baXX6nQlKZXSQEtmOonTv0z9eFUff5JbkGTcXNP8CxXKeQKceqfXh46fsJUzlO-61svaT6u2nikt0puD3WbbWHcESD7NxGNgzEMHTfk3O1BUpu8fuKxNMEIzkp6TDufXhX53E8IIjNA~zoGWHCU-1MfUpET1TT334ieTD6IDDZw__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" as const
                          }
                          startIndex={1 as const}
                        />

                        <Plugin
                          className={classNames(
                            "__wab_instance",
                            sty.plugin___1JSeE
                          )}
                          destination={
                            "https://www.figma.com/community/plugin/913055393462842774/Instance-Utils" as const
                          }
                          imgSrc={
                            "https://s3-alpha-sig.figma.com/plugins/956815209957585811/15598/8853b192-d454-4be1-bc94-f35c69350d33-icon?Expires=1664150400&Signature=dinSfTZnvE8AzyppDokoZl2Nn53SUaOec24LxXXwTxz-eNrXkvDScDfZhk3KGxW2SbGtIrqErspZBM5OCNhIJGb2Xy2AQCjBDG4hOze9A1r5YhJXGCyK5wGAZcOCMj5imw11~rhc-r4YpBSWUX-zLmBqWtOhnpha-P-mN7d6gimWVXgplz3TOycU~bIK6a1gftFBT6rtp9~gpA6tjmwOWHmCgYEZfXGXcg04539yUNie0TkgrobyFByeQF61Nkjeb~I65nEPynPawfsc6fqnIgGTQvadd-gx9oS-e3OxFzIRFZCTZ0~TRx9fzh5Q1oRw9bAVW5KlMH5ESK7phjmMbg__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" as const
                          }
                          startIndex={2 as const}
                        />
                      </p.Stack>
                    </ContentCard>

                    <ContentCard
                      className={classNames(
                        "__wab_instance",
                        sty.contentCard__zwBbL
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame1215"}
                        data-plasmic-override={overrides.frame1215}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame1215)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tUweE
                          )}
                        >
                          {"Vector and Text"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame1220"}
                        data-plasmic-override={overrides.frame1220}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame1220)}
                      >
                        <Plugin
                          className={classNames(
                            "__wab_instance",
                            sty.plugin___8KLbc
                          )}
                          startIndex={0 as const}
                        />

                        <Plugin
                          className={classNames(
                            "__wab_instance",
                            sty.plugin__cr8Yf
                          )}
                          destination={
                            "https://www.figma.com/community/plugin/913055393462842774/Instance-Utils" as const
                          }
                          imgSrc={
                            "https://s3-alpha-sig.figma.com/plugins/1027037684003682350/24087/68349329/971b66e2-eb62-4b51-a32b-26a75857c4ed-icon?Expires=1664150400&Signature=RMQmTAU6hQ86gHzCsI2najKlt15VjsyhqHBs7W8VZFcHymEnujoN7qPNtJim3Q2j8z1DPWOEpGLdECFBZu2gP14ePcv0PBuyJC1tia-zwv7QE~GzlwafANgc7Ed05tHECPveyjEXt3tcPk88PF489ieV2z34Dgosvdp3zyP39R~J7xTVP98CfeaFjhknDi7~Yzbjk-lqounE3VEb5Y2mOU8gUi6qNr81d1-w94A34qy~a~Z42vlmwRZq8iCoFZs5bovw-OshVwirCh5EeoTvrYkYTC5xOvJvUeVarOaiW3x7DsfcAD0HTwn9XigmYaXMRku-gviRWN-sCJPlw6p01A__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" as const
                          }
                          startIndex={1 as const}
                        />

                        <Plugin
                          className={classNames(
                            "__wab_instance",
                            sty.plugin__ruuHr
                          )}
                          destination={
                            "https://www.figma.com/community/plugin/913055393462842774/Instance-Utils" as const
                          }
                          imgSrc={
                            "https://s3-alpha-sig.figma.com/plugins/1039804395780906653/25720/b04155bb-bf22-41ea-8891-c3b9f7e4fd97-icon?Expires=1664150400&Signature=LX5Vnm0ssh7B2DkHPK~b~YE4NHggZEtMuwdm710R8vrcJJOzb9bLBHtRpdSqFqjEXw-ees4Dspi84YDVb~w~qwEsGXbLPGo-6AME8PSTLJ03lz4fZAalSlM3OuWmOimtuzHey3PUgSoKkkqRzkpHqy3rZhekiYOdnE7XOpsu9O3oA6gHhMzWfbdXH7ISppE7R1VTVI5PJ7YG0CGvH25wjNIJTfVRLMCHBI0O~8AkpVzlCUiU95weIs~KuuMB2YxI5LXhDZp2BMb6LYDxeBK9T9K4CHt9mfDZcwEegf83QIip2WGO3YkJLi6nqSPLS7tDjvpml25JPovo9CfjzjOISw__&Key-Pair-Id=APKAINTVSUGEWH5XD5UA" as const
                          }
                          startIndex={2 as const}
                        />
                      </p.Stack>
                    </ContentCard>
                  </p.Stack>
                </p.Stack>
              ) : null}

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame1196"}
                data-plasmic-override={overrides.frame1196}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame1196)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame1194"}
                  data-plasmic-override={overrides.frame1194}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1194)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame1237"}
                    data-plasmic-override={overrides.frame1237}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1237)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8CqH5
                      )}
                    >
                      {"Open Source Design Systems"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lfbum
                      )}
                    >
                      {"Production ready"}
                    </div>
                  </p.Stack>

                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yYy5S
                      )}
                    >
                      {"More »"}
                    </div>
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame1188"}
                  data-plasmic-override={overrides.frame1188}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1188)}
                >
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__k6Tt8
                    )}
                    component={Link}
                    href={
                      "https://www.figma.com/community/file/831698976089873405" as const
                    }
                    platform={"nextjs"}
                  >
                    <ContentCard
                      data-plasmic-name={"contentCard2"}
                      data-plasmic-override={overrides.contentCard2}
                      className={classNames("__wab_instance", sty.contentCard2)}
                      padding={"small" as const}
                    >
                      <AspectRatio
                        className={classNames(
                          "__wab_instance",
                          sty.aspectRatio__t1QSa
                        )}
                        ratio={(() => {
                          try {
                            return 16 / 9;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return 1.333;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <Image
                          className={classNames(
                            "__wab_instance",
                            sty.image__foKCy
                          )}
                          fallbackSrc={
                            "https://via.placeholder.com/150" as const
                          }
                          src={
                            "https://s3-alpha.figma.com/hub/file/2336661714/3caed5c2-059b-4bbc-bd32-ef3709881fec-cover.png" as const
                          }
                        />
                      </AspectRatio>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame1216"}
                        data-plasmic-override={overrides.frame1216}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame1216)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__srDvN
                          )}
                        >
                          {"Ant Design Open Source"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0XylU
                          )}
                        >
                          {"Since April 2018"}
                        </div>
                      </p.Stack>
                    </ContentCard>
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__z8Lh0
                    )}
                    component={Link}
                    href={
                      "https://www.figma.com/community/file/1053233047330321743" as const
                    }
                    platform={"nextjs"}
                  >
                    <ContentCard
                      data-plasmic-name={"contentCard3"}
                      data-plasmic-override={overrides.contentCard3}
                      className={classNames("__wab_instance", sty.contentCard3)}
                      padding={"small" as const}
                    >
                      <AspectRatio
                        className={classNames(
                          "__wab_instance",
                          sty.aspectRatio__qIZcw
                        )}
                        ratio={(() => {
                          try {
                            return 16 / 9;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return 1.333;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <Image
                          className={classNames(
                            "__wab_instance",
                            sty.image__qsmfk
                          )}
                          fallbackSrc={
                            "https://via.placeholder.com/150" as const
                          }
                          src={
                            "https://s3-alpha.figma.com/hub/file/2314233509/beee1800-6c68-49b9-b866-5be5a530c1cf-cover.png" as const
                          }
                        />
                      </AspectRatio>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame1223"}
                        data-plasmic-override={overrides.frame1223}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame1223)}
                      >
                        <div
                          data-plasmic-name={"arcoDesignSystem2"}
                          data-plasmic-override={overrides.arcoDesignSystem2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.arcoDesignSystem2
                          )}
                        >
                          {"Arco Design System "}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wfpJr
                          )}
                        >
                          {"Since October 2021"}
                        </div>
                      </p.Stack>
                    </ContentCard>
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___6KiX3
                    )}
                    component={Link}
                    href={
                      "https://www.figma.com/community/file/898096768838677942" as const
                    }
                    platform={"nextjs"}
                  >
                    <ContentCard
                      data-plasmic-name={"contentCard4"}
                      data-plasmic-override={overrides.contentCard4}
                      className={classNames("__wab_instance", sty.contentCard4)}
                      padding={"small" as const}
                    >
                      <AspectRatio
                        className={classNames(
                          "__wab_instance",
                          sty.aspectRatio___4E2UF
                        )}
                        ratio={(() => {
                          try {
                            return 16 / 9;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return 1.333;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <Image
                          className={classNames(
                            "__wab_instance",
                            sty.image__tjX12
                          )}
                          fallbackSrc={
                            "https://via.placeholder.com/150" as const
                          }
                          src={
                            "https://s3-alpha.figma.com/hub/file/1308589394/c1a0cffa-0a95-4776-873a-5a8feaf37b48-cover.png" as const
                          }
                        />
                      </AspectRatio>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame1221"}
                        data-plasmic-override={overrides.frame1221}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame1221)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zxbvY
                          )}
                        >
                          {"IconPark Open Source"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hyVts
                          )}
                        >
                          {"Since  March 2019"}
                        </div>
                      </p.Stack>
                    </ContentCard>
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__s0N3B
                    )}
                    component={Link}
                    href={
                      "https://www.figma.com/community/file/1021254029764378306" as const
                    }
                    platform={"nextjs"}
                  >
                    <ContentCard
                      data-plasmic-name={"contentCard5"}
                      data-plasmic-override={overrides.contentCard5}
                      className={classNames("__wab_instance", sty.contentCard5)}
                      padding={"small" as const}
                    >
                      <AspectRatio
                        className={classNames(
                          "__wab_instance",
                          sty.aspectRatio__ySv0L
                        )}
                        ratio={(() => {
                          try {
                            return 16 / 9;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return 1.333;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <Image
                          className={classNames(
                            "__wab_instance",
                            sty.image__dhNRx
                          )}
                          fallbackSrc={
                            "https://via.placeholder.com/150" as const
                          }
                          src={
                            "https://s3-alpha.figma.com/hub/file/2210381847/5a90669c-5115-4982-b5cc-2ee598baece3-cover.png" as const
                          }
                        />
                      </AspectRatio>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame1205"}
                        data-plasmic-override={overrides.frame1205}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame1205)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6VYlk
                          )}
                        >
                          {"Element Plus"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ayy6F
                          )}
                        >
                          {"Since  March 2020"}
                        </div>
                      </p.Stack>
                    </ContentCard>
                  </p.PlasmicLink>
                </p.Stack>
              </p.Stack>

              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__bjwSe)}>
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame1206"}
                    data-plasmic-override={overrides.frame1206}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1206)}
                  >
                    <Group955Icon
                      className={classNames(projectcss.all, sty.svg__g6NYo)}
                      role={"img"}
                    />

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame1207"}
                      data-plasmic-override={overrides.frame1207}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame1207)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame1238"}
                        data-plasmic-override={overrides.frame1238}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame1238)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__i9PY
                          )}
                        >
                          {"Conference Agenda"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bxrJv
                          )}
                        >
                          {"Connecting the globe"}
                        </div>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__miOuH
                        )}
                      >
                        {"More»"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame1208"}
                      data-plasmic-override={overrides.frame1208}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame1208)}
                    >
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__dOZhl
                        )}
                        component={Link}
                        href={
                          "https://www.youtube.com/watch?v=hnPIpkvDxjc&t=1351s" as const
                        }
                        platform={"nextjs"}
                      >
                        <ContentCard
                          data-plasmic-name={"contentCard6"}
                          data-plasmic-override={overrides.contentCard6}
                          className={classNames(
                            "__wab_instance",
                            sty.contentCard6
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"frame1210"}
                            data-plasmic-override={overrides.frame1210}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.frame1210
                            )}
                          >
                            <div
                              data-plasmic-name={"rectangle27"}
                              data-plasmic-override={overrides.rectangle27}
                              className={classNames(
                                projectcss.all,
                                sty.rectangle27
                              )}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rn69I
                              )}
                            >
                              {"Config 2021"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pwV89
                              )}
                            >
                              {
                                "Feb, 14th 2021 \n\n🌍 Global Virtual conference"
                              }
                            </div>
                          </p.Stack>
                        </ContentCard>
                      </p.PlasmicLink>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2AclY
                        )}
                      >
                        <PawIcon
                          className={classNames(projectcss.all, sty.svg__mPw92)}
                          role={"img"}
                        />
                      </div>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__z4VsF
                        )}
                        component={Link}
                        href={
                          "https://www.eventbrite.de/e/into-design-systems-munich-meetup-in-person-free-tickets-407558517497" as const
                        }
                        platform={"nextjs"}
                      >
                        <ContentCard
                          data-plasmic-name={"contentCard7"}
                          data-plasmic-override={overrides.contentCard7}
                          className={classNames(
                            "__wab_instance",
                            sty.contentCard7
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"frame1212"}
                            data-plasmic-override={overrides.frame1212}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.frame1212
                            )}
                          >
                            <div
                              data-plasmic-name={"rectangle28"}
                              data-plasmic-override={overrides.rectangle28}
                              className={classNames(
                                projectcss.all,
                                sty.rectangle28
                              )}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___13B4L
                              )}
                            >
                              {"Into Design System Munich "}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dUqJm
                              )}
                            >
                              {"Sept, 21st 2022 \n\nMunich, 🇩🇪 Germany"}
                            </div>
                          </p.Stack>
                        </ContentCard>
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__mIwbc
                        )}
                        component={Link}
                        href={"https://thegeekgathering.org/" as const}
                        platform={"nextjs"}
                      >
                        <ContentCard
                          data-plasmic-name={"contentCard8"}
                          data-plasmic-override={overrides.contentCard8}
                          className={classNames(
                            "__wab_instance",
                            sty.contentCard8
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"frame1239"}
                            data-plasmic-override={overrides.frame1239}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.frame1239
                            )}
                          >
                            <div
                              data-plasmic-name={"rectangle29"}
                              data-plasmic-override={overrides.rectangle29}
                              className={classNames(
                                projectcss.all,
                                sty.rectangle29
                              )}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ufm50
                              )}
                            >
                              {"The Geek Gathering 2022"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__g11R9
                              )}
                            >
                              {"Oct, 6th 2022\n\nOsijek, 🇭🇷 Croatia"}
                            </div>
                          </p.Stack>
                        </ContentCard>
                      </p.PlasmicLink>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__jf1N6
                        )}
                        component={Link}
                        href={"https://dafed.org/" as const}
                        platform={"nextjs"}
                      >
                        <ContentCard
                          data-plasmic-name={"contentCard9"}
                          data-plasmic-override={overrides.contentCard9}
                          className={classNames(
                            "__wab_instance",
                            sty.contentCard9
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"frame1252"}
                            data-plasmic-override={overrides.frame1252}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.frame1252
                            )}
                          >
                            <div
                              data-plasmic-name={"rectangle30"}
                              data-plasmic-override={overrides.rectangle30}
                              className={classNames(
                                projectcss.all,
                                sty.rectangle30
                              )}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__krgOj
                              )}
                            >
                              {"DaFED"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dfK9C
                              )}
                            >
                              {"Oct, 12th 2022\n\nBelgrade, 🇷🇸 Serbia"}
                            </div>
                          </p.Stack>
                        </ContentCard>
                      </p.PlasmicLink>
                    </p.Stack>
                  </p.Stack>
                </div>
              ) : null}

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame1240"}
                data-plasmic-override={overrides.frame1240}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame1240)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame1241"}
                  data-plasmic-override={overrides.frame1241}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1241)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame1242"}
                    data-plasmic-override={overrides.frame1242}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1242)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qVjWx
                      )}
                    >
                      {"Video Tutorials"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pojMm
                      )}
                    >
                      {"Learning Cutting Edge Practices"}
                    </div>
                  </p.Stack>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__dlYv
                    )}
                    component={Link}
                    href={
                      "https://www.youtube.com/channel/UCK-Wdz9A5UtgkiHL9a20LpA" as const
                    }
                    platform={"nextjs"}
                    target={undefined}
                  >
                    {"YouTube Channel »"}
                  </p.PlasmicLink>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame1243"}
                  data-plasmic-override={overrides.frame1243}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame1243)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame1244"}
                    data-plasmic-override={overrides.frame1244}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1244)}
                  >
                    <AspectRatio
                      className={classNames(
                        "__wab_instance",
                        sty.aspectRatio__swvNs
                      )}
                      ratio={(() => {
                        try {
                          return 16 / 9;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return 1.333;
                          }
                          throw e;
                        }
                      })()}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jxkrP
                          )}
                        >
                          <YouTube
                            className={classNames(
                              "__wab_instance",
                              sty.youTube___4Ajz9
                            )}
                            controls={true}
                            videoId={"_9GnPXT8L7U" as const}
                          />
                        </div>
                      ) : null}
                    </AspectRatio>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame1245"}
                      data-plasmic-override={overrides.frame1245}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame1245)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__odC8Z
                        )}
                      >
                        {"Row Table Utltimate Solution"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__i5Kuv
                        )}
                      >
                        {"Maximizing the flexiblity of ◇tables"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame1246"}
                    data-plasmic-override={overrides.frame1246}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1246)}
                  >
                    <AspectRatio
                      className={classNames(
                        "__wab_instance",
                        sty.aspectRatio__bzqx
                      )}
                      ratio={(() => {
                        try {
                          return 16 / 9;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return 1.333;
                          }
                          throw e;
                        }
                      })()}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__w9XeI
                          )}
                        >
                          <YouTube
                            className={classNames(
                              "__wab_instance",
                              sty.youTube__z41
                            )}
                            controls={true}
                            videoId={"DGm_jt7Lync" as const}
                          />
                        </div>
                      ) : null}
                    </AspectRatio>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame1247"}
                      data-plasmic-override={overrides.frame1247}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame1247)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__x5Fs
                        )}
                      >
                        {"Figma’s Design System Enabler"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nPaLe
                        )}
                      >
                        {"A General Walk through of Instance Utils"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame1248"}
                    data-plasmic-override={overrides.frame1248}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1248)}
                  >
                    <AspectRatio
                      className={classNames(
                        "__wab_instance",
                        sty.aspectRatio__h87J3
                      )}
                      ratio={(() => {
                        try {
                          return 16 / 9;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return 1.333;
                          }
                          throw e;
                        }
                      })()}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__e98T
                          )}
                        >
                          <YouTube
                            className={classNames(
                              "__wab_instance",
                              sty.youTube__oumZe
                            )}
                            controls={true}
                            videoId={"FtJ7UscJxYU" as const}
                          />
                        </div>
                      ) : null}
                    </AspectRatio>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame1249"}
                      data-plasmic-override={overrides.frame1249}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame1249)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gs4Wy
                        )}
                      >
                        {"Working with slots in Figma"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vKwmf
                        )}
                      >
                        {"Seamless work flow with slots"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame1250"}
                    data-plasmic-override={overrides.frame1250}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1250)}
                  >
                    <AspectRatio
                      className={classNames(
                        "__wab_instance",
                        sty.aspectRatio__idWVo
                      )}
                      ratio={(() => {
                        try {
                          return 16 / 9;
                        } catch (e) {
                          if (e instanceof TypeError) {
                            return 1.333;
                          }
                          throw e;
                        }
                      })()}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__z7KK
                          )}
                        >
                          <YouTube
                            className={classNames(
                              "__wab_instance",
                              sty.youTube__pLdcX
                            )}
                            controls={true}
                            videoId={"H6W6V9JxYVg" as const}
                          />
                        </div>
                      ) : null}
                    </AspectRatio>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame1251"}
                      data-plasmic-override={overrides.frame1251}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame1251)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0Vzfw
                        )}
                      >
                        {"Figma Magic Hitbox"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__osxnz
                        )}
                      >
                        {"Design better UX for components"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            hasGap={true}
            className={classNames(projectcss.all, sty.footer)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame1253"}
              data-plasmic-override={overrides.frame1253}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame1253)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame1254"}
                data-plasmic-override={overrides.frame1254}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame1254)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6Ob2G
                  )}
                >
                  {"About Me"}
                </div>

                <div
                  data-plasmic-name={"frame1255"}
                  data-plasmic-override={overrides.frame1255}
                  className={classNames(projectcss.all, sty.frame1255)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kP9Gi
                    )}
                  >
                    {"My Works"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9AzmP
                    )}
                  >
                    {"My Story"}
                  </div>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame1256"}
                data-plasmic-override={overrides.frame1256}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame1256)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rqYwn
                  )}
                >
                  {"Shop"}
                </div>

                <div
                  data-plasmic-name={"frame1257"}
                  data-plasmic-override={overrides.frame1257}
                  className={classNames(projectcss.all, sty.frame1257)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9Ec7
                    )}
                  >
                    {"Pro Layout Panel"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__i7PUj
                    )}
                  >
                    {"Figma Section"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xmqTk
                    )}
                  >
                    {"Instance Utils"}
                  </div>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame1258"}
                data-plasmic-override={overrides.frame1258}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame1258)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dwLdU
                  )}
                >
                  {"Collaborate"}
                </div>

                <div
                  data-plasmic-name={"frame1259"}
                  data-plasmic-override={overrides.frame1259}
                  className={classNames(projectcss.all, sty.frame1259)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qWgI
                    )}
                  >
                    {"Invite me to Speak"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__neagR
                    )}
                  >
                    {"Hire me for Freelance"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uxW6T
                    )}
                  >
                    {"Private Teaching"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fcT0
                    )}
                  >
                    {"Become An Affiliate"}
                  </div>
                </div>
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame1260"}
              data-plasmic-override={overrides.frame1260}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame1260)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wDk5Y
                )}
              >
                {"Be the first to know"}
              </div>

              <SuperEllipseButton
                className={classNames(
                  "__wab_instance",
                  sty.superEllipseButton__uaWcc
                )}
              />
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "left",
    "frame1225",
    "right2",
    "frame1187",
    "_",
    "hero",
    "leaf",
    "image19",
    "image21",
    "frame1177",
    "typewriter",
    "arrowReveal",
    "right",
    "background",
    "buttonwrap",
    "frame1181",
    "frame1176",
    "frame1178",
    "frame",
    "frame1179",
    "frame1180",
    "page1",
    "blackNextjs",
    "nextBlack",
    "bgElements",
    "frame956",
    "image20",
    "rectangle25",
    "image17",
    "side",
    "separator2",
    "content",
    "counters1",
    "column1",
    "counter9",
    "title9",
    "title10",
    "column2",
    "counter7",
    "title7",
    "title8",
    "column3",
    "counter5",
    "title5",
    "title6",
    "column4",
    "counter3",
    "title3",
    "title4",
    "column5",
    "counter",
    "title",
    "title2",
    "frame1197",
    "frame1193",
    "frame1214",
    "frame1222",
    "frame1189",
    "frame1217",
    "frame1198",
    "frame1218",
    "frame1200",
    "frame1219",
    "frame1215",
    "frame1220",
    "frame1196",
    "frame1194",
    "frame1237",
    "frame1188",
    "contentCard2",
    "frame1216",
    "contentCard3",
    "frame1223",
    "arcoDesignSystem2",
    "contentCard4",
    "frame1221",
    "contentCard5",
    "frame1205",
    "frame1206",
    "frame1207",
    "frame1238",
    "frame1208",
    "contentCard6",
    "frame1210",
    "rectangle27",
    "contentCard7",
    "frame1212",
    "rectangle28",
    "contentCard8",
    "frame1239",
    "rectangle29",
    "contentCard9",
    "frame1252",
    "rectangle30",
    "frame1240",
    "frame1241",
    "frame1242",
    "frame1243",
    "frame1244",
    "frame1245",
    "frame1246",
    "frame1247",
    "frame1248",
    "frame1249",
    "frame1250",
    "frame1251",
    "footer",
    "frame1253",
    "frame1254",
    "frame1255",
    "frame1256",
    "frame1257",
    "frame1258",
    "frame1259",
    "frame1260"
  ],
  header: ["header", "left", "frame1225", "right2", "frame1187", "_"],
  left: ["left", "frame1225"],
  frame1225: ["frame1225"],
  right2: ["right2", "frame1187", "_"],
  frame1187: ["frame1187", "_"],
  _: ["_"],
  hero: [
    "hero",
    "leaf",
    "image19",
    "image21",
    "frame1177",
    "typewriter",
    "arrowReveal",
    "right",
    "background",
    "buttonwrap",
    "frame1181",
    "frame1176",
    "frame1178",
    "frame",
    "frame1179",
    "frame1180",
    "page1",
    "blackNextjs",
    "nextBlack",
    "bgElements",
    "frame956",
    "image20",
    "rectangle25",
    "image17"
  ],
  leaf: ["leaf", "image19", "image21"],
  image19: ["image19"],
  image21: ["image21"],
  frame1177: ["frame1177", "typewriter"],
  typewriter: ["typewriter"],
  arrowReveal: ["arrowReveal"],
  right: ["right", "background"],
  background: ["background"],
  buttonwrap: ["buttonwrap"],
  frame1181: [
    "frame1181",
    "frame1176",
    "frame1178",
    "frame",
    "frame1179",
    "frame1180",
    "page1",
    "blackNextjs",
    "nextBlack"
  ],
  frame1176: ["frame1176", "frame1178", "frame"],
  frame1178: ["frame1178", "frame"],
  frame: ["frame"],
  frame1179: ["frame1179"],
  frame1180: ["frame1180", "page1", "blackNextjs", "nextBlack"],
  page1: ["page1", "blackNextjs", "nextBlack"],
  blackNextjs: ["blackNextjs", "nextBlack"],
  nextBlack: ["nextBlack"],
  bgElements: ["bgElements", "frame956", "image20", "rectangle25", "image17"],
  frame956: ["frame956", "image20", "rectangle25"],
  image20: ["image20"],
  rectangle25: ["rectangle25"],
  image17: ["image17"],
  side: ["side"],
  separator2: ["separator2"],
  content: [
    "content",
    "counters1",
    "column1",
    "counter9",
    "title9",
    "title10",
    "column2",
    "counter7",
    "title7",
    "title8",
    "column3",
    "counter5",
    "title5",
    "title6",
    "column4",
    "counter3",
    "title3",
    "title4",
    "column5",
    "counter",
    "title",
    "title2",
    "frame1197",
    "frame1193",
    "frame1214",
    "frame1222",
    "frame1189",
    "frame1217",
    "frame1198",
    "frame1218",
    "frame1200",
    "frame1219",
    "frame1215",
    "frame1220",
    "frame1196",
    "frame1194",
    "frame1237",
    "frame1188",
    "contentCard2",
    "frame1216",
    "contentCard3",
    "frame1223",
    "arcoDesignSystem2",
    "contentCard4",
    "frame1221",
    "contentCard5",
    "frame1205",
    "frame1206",
    "frame1207",
    "frame1238",
    "frame1208",
    "contentCard6",
    "frame1210",
    "rectangle27",
    "contentCard7",
    "frame1212",
    "rectangle28",
    "contentCard8",
    "frame1239",
    "rectangle29",
    "contentCard9",
    "frame1252",
    "rectangle30",
    "frame1240",
    "frame1241",
    "frame1242",
    "frame1243",
    "frame1244",
    "frame1245",
    "frame1246",
    "frame1247",
    "frame1248",
    "frame1249",
    "frame1250",
    "frame1251"
  ],
  counters1: [
    "counters1",
    "column1",
    "counter9",
    "title9",
    "title10",
    "column2",
    "counter7",
    "title7",
    "title8",
    "column3",
    "counter5",
    "title5",
    "title6",
    "column4",
    "counter3",
    "title3",
    "title4",
    "column5",
    "counter",
    "title",
    "title2"
  ],
  column1: ["column1", "counter9", "title9", "title10"],
  counter9: ["counter9"],
  title9: ["title9", "title10"],
  title10: ["title10"],
  column2: ["column2", "counter7", "title7", "title8"],
  counter7: ["counter7"],
  title7: ["title7", "title8"],
  title8: ["title8"],
  column3: ["column3", "counter5", "title5", "title6"],
  counter5: ["counter5"],
  title5: ["title5", "title6"],
  title6: ["title6"],
  column4: ["column4", "counter3", "title3", "title4"],
  counter3: ["counter3"],
  title3: ["title3", "title4"],
  title4: ["title4"],
  column5: ["column5", "counter", "title", "title2"],
  counter: ["counter"],
  title: ["title", "title2"],
  title2: ["title2"],
  frame1197: [
    "frame1197",
    "frame1193",
    "frame1214",
    "frame1222",
    "frame1189",
    "frame1217",
    "frame1198",
    "frame1218",
    "frame1200",
    "frame1219",
    "frame1215",
    "frame1220",
    "frame1196",
    "frame1194",
    "frame1237",
    "frame1188",
    "contentCard2",
    "frame1216",
    "contentCard3",
    "frame1223",
    "arcoDesignSystem2",
    "contentCard4",
    "frame1221",
    "contentCard5",
    "frame1205",
    "frame1206",
    "frame1207",
    "frame1238",
    "frame1208",
    "contentCard6",
    "frame1210",
    "rectangle27",
    "contentCard7",
    "frame1212",
    "rectangle28",
    "contentCard8",
    "frame1239",
    "rectangle29",
    "contentCard9",
    "frame1252",
    "rectangle30",
    "frame1240",
    "frame1241",
    "frame1242",
    "frame1243",
    "frame1244",
    "frame1245",
    "frame1246",
    "frame1247",
    "frame1248",
    "frame1249",
    "frame1250",
    "frame1251"
  ],
  frame1193: ["frame1193", "frame1214"],
  frame1214: ["frame1214"],
  frame1222: [
    "frame1222",
    "frame1189",
    "frame1217",
    "frame1198",
    "frame1218",
    "frame1200",
    "frame1219",
    "frame1215",
    "frame1220"
  ],
  frame1189: ["frame1189"],
  frame1217: ["frame1217"],
  frame1198: ["frame1198"],
  frame1218: ["frame1218"],
  frame1200: ["frame1200"],
  frame1219: ["frame1219"],
  frame1215: ["frame1215"],
  frame1220: ["frame1220"],
  frame1196: [
    "frame1196",
    "frame1194",
    "frame1237",
    "frame1188",
    "contentCard2",
    "frame1216",
    "contentCard3",
    "frame1223",
    "arcoDesignSystem2",
    "contentCard4",
    "frame1221",
    "contentCard5",
    "frame1205"
  ],
  frame1194: ["frame1194", "frame1237"],
  frame1237: ["frame1237"],
  frame1188: [
    "frame1188",
    "contentCard2",
    "frame1216",
    "contentCard3",
    "frame1223",
    "arcoDesignSystem2",
    "contentCard4",
    "frame1221",
    "contentCard5",
    "frame1205"
  ],
  contentCard2: ["contentCard2", "frame1216"],
  frame1216: ["frame1216"],
  contentCard3: ["contentCard3", "frame1223", "arcoDesignSystem2"],
  frame1223: ["frame1223", "arcoDesignSystem2"],
  arcoDesignSystem2: ["arcoDesignSystem2"],
  contentCard4: ["contentCard4", "frame1221"],
  frame1221: ["frame1221"],
  contentCard5: ["contentCard5", "frame1205"],
  frame1205: ["frame1205"],
  frame1206: [
    "frame1206",
    "frame1207",
    "frame1238",
    "frame1208",
    "contentCard6",
    "frame1210",
    "rectangle27",
    "contentCard7",
    "frame1212",
    "rectangle28",
    "contentCard8",
    "frame1239",
    "rectangle29",
    "contentCard9",
    "frame1252",
    "rectangle30"
  ],
  frame1207: ["frame1207", "frame1238"],
  frame1238: ["frame1238"],
  frame1208: [
    "frame1208",
    "contentCard6",
    "frame1210",
    "rectangle27",
    "contentCard7",
    "frame1212",
    "rectangle28",
    "contentCard8",
    "frame1239",
    "rectangle29",
    "contentCard9",
    "frame1252",
    "rectangle30"
  ],
  contentCard6: ["contentCard6", "frame1210", "rectangle27"],
  frame1210: ["frame1210", "rectangle27"],
  rectangle27: ["rectangle27"],
  contentCard7: ["contentCard7", "frame1212", "rectangle28"],
  frame1212: ["frame1212", "rectangle28"],
  rectangle28: ["rectangle28"],
  contentCard8: ["contentCard8", "frame1239", "rectangle29"],
  frame1239: ["frame1239", "rectangle29"],
  rectangle29: ["rectangle29"],
  contentCard9: ["contentCard9", "frame1252", "rectangle30"],
  frame1252: ["frame1252", "rectangle30"],
  rectangle30: ["rectangle30"],
  frame1240: [
    "frame1240",
    "frame1241",
    "frame1242",
    "frame1243",
    "frame1244",
    "frame1245",
    "frame1246",
    "frame1247",
    "frame1248",
    "frame1249",
    "frame1250",
    "frame1251"
  ],
  frame1241: ["frame1241", "frame1242"],
  frame1242: ["frame1242"],
  frame1243: [
    "frame1243",
    "frame1244",
    "frame1245",
    "frame1246",
    "frame1247",
    "frame1248",
    "frame1249",
    "frame1250",
    "frame1251"
  ],
  frame1244: ["frame1244", "frame1245"],
  frame1245: ["frame1245"],
  frame1246: ["frame1246", "frame1247"],
  frame1247: ["frame1247"],
  frame1248: ["frame1248", "frame1249"],
  frame1249: ["frame1249"],
  frame1250: ["frame1250", "frame1251"],
  frame1251: ["frame1251"],
  footer: [
    "footer",
    "frame1253",
    "frame1254",
    "frame1255",
    "frame1256",
    "frame1257",
    "frame1258",
    "frame1259",
    "frame1260"
  ],
  frame1253: [
    "frame1253",
    "frame1254",
    "frame1255",
    "frame1256",
    "frame1257",
    "frame1258",
    "frame1259"
  ],
  frame1254: ["frame1254", "frame1255"],
  frame1255: ["frame1255"],
  frame1256: ["frame1256", "frame1257"],
  frame1257: ["frame1257"],
  frame1258: ["frame1258", "frame1259"],
  frame1259: ["frame1259"],
  frame1260: ["frame1260"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  left: "div";
  frame1225: "div";
  right2: "div";
  frame1187: "div";
  _: "div";
  hero: "div";
  leaf: typeof Reveal;
  image19: "div";
  image21: "div";
  frame1177: "div";
  typewriter: typeof Typewriter;
  arrowReveal: typeof Reveal;
  right: "div";
  background: typeof p.PlasmicImg;
  buttonwrap: "a";
  frame1181: "div";
  frame1176: "div";
  frame1178: "div";
  frame: "div";
  frame1179: "div";
  frame1180: "div";
  page1: "div";
  blackNextjs: "div";
  nextBlack: "div";
  bgElements: typeof Reveal;
  frame956: "div";
  image20: "div";
  rectangle25: "div";
  image17: "div";
  side: "div";
  separator2: "div";
  content: "div";
  counters1: "div";
  column1: "div";
  counter9: "div";
  title9: "div";
  title10: "div";
  column2: "div";
  counter7: "div";
  title7: "div";
  title8: "div";
  column3: "div";
  counter5: "div";
  title5: "div";
  title6: "div";
  column4: "div";
  counter3: "div";
  title3: "div";
  title4: "div";
  column5: "div";
  counter: "div";
  title: "div";
  title2: "div";
  frame1197: "div";
  frame1193: "div";
  frame1214: "div";
  frame1222: "div";
  frame1189: "div";
  frame1217: "div";
  frame1198: "div";
  frame1218: "div";
  frame1200: "div";
  frame1219: "div";
  frame1215: "div";
  frame1220: "div";
  frame1196: "div";
  frame1194: "div";
  frame1237: "div";
  frame1188: "div";
  contentCard2: typeof ContentCard;
  frame1216: "div";
  contentCard3: typeof ContentCard;
  frame1223: "div";
  arcoDesignSystem2: "div";
  contentCard4: typeof ContentCard;
  frame1221: "div";
  contentCard5: typeof ContentCard;
  frame1205: "div";
  frame1206: "div";
  frame1207: "div";
  frame1238: "div";
  frame1208: "div";
  contentCard6: typeof ContentCard;
  frame1210: "div";
  rectangle27: "div";
  contentCard7: typeof ContentCard;
  frame1212: "div";
  rectangle28: "div";
  contentCard8: typeof ContentCard;
  frame1239: "div";
  rectangle29: "div";
  contentCard9: typeof ContentCard;
  frame1252: "div";
  rectangle30: "div";
  frame1240: "div";
  frame1241: "div";
  frame1242: "div";
  frame1243: "div";
  frame1244: "div";
  frame1245: "div";
  frame1246: "div";
  frame1247: "div";
  frame1248: "div";
  frame1249: "div";
  frame1250: "div";
  frame1251: "div";
  footer: "div";
  frame1253: "div";
  frame1254: "div";
  frame1255: "div";
  frame1256: "div";
  frame1257: "div";
  frame1258: "div";
  frame1259: "div";
  frame1260: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage__VariantsArgs;
    args?: PlasmicNewPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewPage__ArgProps,
          internalVariantPropNames: PlasmicNewPage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    left: makeNodeComponent("left"),
    frame1225: makeNodeComponent("frame1225"),
    right2: makeNodeComponent("right2"),
    frame1187: makeNodeComponent("frame1187"),
    _: makeNodeComponent("_"),
    hero: makeNodeComponent("hero"),
    leaf: makeNodeComponent("leaf"),
    image19: makeNodeComponent("image19"),
    image21: makeNodeComponent("image21"),
    frame1177: makeNodeComponent("frame1177"),
    typewriter: makeNodeComponent("typewriter"),
    arrowReveal: makeNodeComponent("arrowReveal"),
    right: makeNodeComponent("right"),
    background: makeNodeComponent("background"),
    buttonwrap: makeNodeComponent("buttonwrap"),
    frame1181: makeNodeComponent("frame1181"),
    frame1176: makeNodeComponent("frame1176"),
    frame1178: makeNodeComponent("frame1178"),
    frame: makeNodeComponent("frame"),
    frame1179: makeNodeComponent("frame1179"),
    frame1180: makeNodeComponent("frame1180"),
    page1: makeNodeComponent("page1"),
    blackNextjs: makeNodeComponent("blackNextjs"),
    nextBlack: makeNodeComponent("nextBlack"),
    bgElements: makeNodeComponent("bgElements"),
    frame956: makeNodeComponent("frame956"),
    image20: makeNodeComponent("image20"),
    rectangle25: makeNodeComponent("rectangle25"),
    image17: makeNodeComponent("image17"),
    side: makeNodeComponent("side"),
    separator2: makeNodeComponent("separator2"),
    content: makeNodeComponent("content"),
    counters1: makeNodeComponent("counters1"),
    column1: makeNodeComponent("column1"),
    counter9: makeNodeComponent("counter9"),
    title9: makeNodeComponent("title9"),
    title10: makeNodeComponent("title10"),
    column2: makeNodeComponent("column2"),
    counter7: makeNodeComponent("counter7"),
    title7: makeNodeComponent("title7"),
    title8: makeNodeComponent("title8"),
    column3: makeNodeComponent("column3"),
    counter5: makeNodeComponent("counter5"),
    title5: makeNodeComponent("title5"),
    title6: makeNodeComponent("title6"),
    column4: makeNodeComponent("column4"),
    counter3: makeNodeComponent("counter3"),
    title3: makeNodeComponent("title3"),
    title4: makeNodeComponent("title4"),
    column5: makeNodeComponent("column5"),
    counter: makeNodeComponent("counter"),
    title: makeNodeComponent("title"),
    title2: makeNodeComponent("title2"),
    frame1197: makeNodeComponent("frame1197"),
    frame1193: makeNodeComponent("frame1193"),
    frame1214: makeNodeComponent("frame1214"),
    frame1222: makeNodeComponent("frame1222"),
    frame1189: makeNodeComponent("frame1189"),
    frame1217: makeNodeComponent("frame1217"),
    frame1198: makeNodeComponent("frame1198"),
    frame1218: makeNodeComponent("frame1218"),
    frame1200: makeNodeComponent("frame1200"),
    frame1219: makeNodeComponent("frame1219"),
    frame1215: makeNodeComponent("frame1215"),
    frame1220: makeNodeComponent("frame1220"),
    frame1196: makeNodeComponent("frame1196"),
    frame1194: makeNodeComponent("frame1194"),
    frame1237: makeNodeComponent("frame1237"),
    frame1188: makeNodeComponent("frame1188"),
    contentCard2: makeNodeComponent("contentCard2"),
    frame1216: makeNodeComponent("frame1216"),
    contentCard3: makeNodeComponent("contentCard3"),
    frame1223: makeNodeComponent("frame1223"),
    arcoDesignSystem2: makeNodeComponent("arcoDesignSystem2"),
    contentCard4: makeNodeComponent("contentCard4"),
    frame1221: makeNodeComponent("frame1221"),
    contentCard5: makeNodeComponent("contentCard5"),
    frame1205: makeNodeComponent("frame1205"),
    frame1206: makeNodeComponent("frame1206"),
    frame1207: makeNodeComponent("frame1207"),
    frame1238: makeNodeComponent("frame1238"),
    frame1208: makeNodeComponent("frame1208"),
    contentCard6: makeNodeComponent("contentCard6"),
    frame1210: makeNodeComponent("frame1210"),
    rectangle27: makeNodeComponent("rectangle27"),
    contentCard7: makeNodeComponent("contentCard7"),
    frame1212: makeNodeComponent("frame1212"),
    rectangle28: makeNodeComponent("rectangle28"),
    contentCard8: makeNodeComponent("contentCard8"),
    frame1239: makeNodeComponent("frame1239"),
    rectangle29: makeNodeComponent("rectangle29"),
    contentCard9: makeNodeComponent("contentCard9"),
    frame1252: makeNodeComponent("frame1252"),
    rectangle30: makeNodeComponent("rectangle30"),
    frame1240: makeNodeComponent("frame1240"),
    frame1241: makeNodeComponent("frame1241"),
    frame1242: makeNodeComponent("frame1242"),
    frame1243: makeNodeComponent("frame1243"),
    frame1244: makeNodeComponent("frame1244"),
    frame1245: makeNodeComponent("frame1245"),
    frame1246: makeNodeComponent("frame1246"),
    frame1247: makeNodeComponent("frame1247"),
    frame1248: makeNodeComponent("frame1248"),
    frame1249: makeNodeComponent("frame1249"),
    frame1250: makeNodeComponent("frame1250"),
    frame1251: makeNodeComponent("frame1251"),
    footer: makeNodeComponent("footer"),
    frame1253: makeNodeComponent("frame1253"),
    frame1254: makeNodeComponent("frame1254"),
    frame1255: makeNodeComponent("frame1255"),
    frame1256: makeNodeComponent("frame1256"),
    frame1257: makeNodeComponent("frame1257"),
    frame1258: makeNodeComponent("frame1258"),
    frame1259: makeNodeComponent("frame1259"),
    frame1260: makeNodeComponent("frame1260"),

    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
