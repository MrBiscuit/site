// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qDNA17RfdgsM73kkELPPxa
// Component: NiW2fD3OqY-
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: gCP9N_nn5MCbJS/component
import Button from "../../Button"; // plasmic-import: s3E0QheUTMLIRg/component
import Section from "../../Section"; // plasmic-import: polj06cVBtzpxl/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import VideoExample from "../../VideoExample"; // plasmic-import: AuERE4DOLn/component
import FeatureCard from "../../FeatureCard"; // plasmic-import: 8J_TITQjji4-M9/component
import Plan from "../../Plan"; // plasmic-import: IC0peUQeOrc-TC/component
import Bullet from "../../Bullet"; // plasmic-import: h8iasHjPSdhGL5/component
import Footer from "../../Footer"; // plasmic-import: 48OR7NBtqAcun7/component

import { useScreenVariants as useScreenVariants_3KhhFf1Cq1Qfos } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 3KhhFf1CQ1QFOS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_outline_to_single_stroke_css from "../outline_to_single_stroke/plasmic_outline_to_single_stroke.module.css"; // plasmic-import: 56iVbBJXbx9hFxysoAGHJC/projectcss
import projectcss from "./plasmic_pro_layout_panel_landing_pgae.module.css"; // plasmic-import: qDNA17RfdgsM73kkELPPxa/projectcss
import sty from "./PlasmicFigmaSectionChinese.module.css"; // plasmic-import: NiW2fD3OqY-/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: r_TPt86vHV4SXb/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: FfSoXEgUCW0G_l/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: PK0IXvxdsy/icon
import Icon25Icon from "./icons/PlasmicIcon__Icon25"; // plasmic-import: kuMSi66yKA/icon
import Icon26Icon from "./icons/PlasmicIcon__Icon26"; // plasmic-import: KRTK6f0Lc0/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: nx8ckd2R4tXE/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: Ao0rL4yuRk/icon

export type PlasmicFigmaSectionChinese__VariantMembers = {};

export type PlasmicFigmaSectionChinese__VariantsArgs = {};
type VariantPropType = keyof PlasmicFigmaSectionChinese__VariantsArgs;
export const PlasmicFigmaSectionChinese__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFigmaSectionChinese__ArgsType = {};
type ArgPropType = keyof PlasmicFigmaSectionChinese__ArgsType;
export const PlasmicFigmaSectionChinese__ArgProps = new Array<ArgPropType>();

export type PlasmicFigmaSectionChinese__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  topSection?: p.Flex<typeof Section>;
  solutions?: p.Flex<typeof Section>;
  howItWorks?: p.Flex<typeof Section>;
  pricingSection?: p.Flex<typeof Section>;
  pricing?: p.Flex<"a"> & Partial<LinkProps>;
  columns?: p.Flex<"div">;
  howItWorks2?: p.Flex<typeof Section>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultFigmaSectionChineseProps {}

function PlasmicFigmaSectionChinese__RenderFunc(props: {
  variants: PlasmicFigmaSectionChinese__VariantsArgs;
  args: PlasmicFigmaSectionChinese__ArgsType;
  overrides: PlasmicFigmaSectionChinese__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_3KhhFf1Cq1Qfos()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_outline_to_single_stroke_css.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
            slot={"Figma Section"}
            slot2={
              <React.Fragment>
                <Button
                  className={classNames("__wab_instance", sty.button__iqdXp)}
                  color={"clear" as const}
                  link={"#feature" as const}
                  size={"compact" as const}
                >
                  {"功能"}
                </Button>

                <Button
                  className={classNames("__wab_instance", sty.button__aCh9Z)}
                  color={"clear" as const}
                  link={"#price" as const}
                  size={"compact" as const}
                >
                  {"价格"}
                </Button>

                <Button
                  className={classNames("__wab_instance", sty.button__wLjnO)}
                  color={"clear" as const}
                  link={`/figmasection`}
                  size={"compact" as const}
                >
                  {"English"}
                </Button>
              </React.Fragment>
            }
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__yjgev)}
              displayHeight={"48px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"48px" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/pro_layout_panel_landing_pgae/images/image6.svg",
                fullWidth: 150,
                fullHeight: 150,
                aspectRatio: 1
              }}
            />
          </Header>

          <Section
            data-plasmic-name={"topSection"}
            data-plasmic-override={overrides.topSection}
            className={classNames("__wab_instance", sty.topSection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sqBKv)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___7YUr5)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__vKryz)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__j4G2N
                    )}
                  >
                    {"让你的 Figma 设计稿"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__h3GmY
                    )}
                  >
                    {"分类更清晰\n更易查找"}
                  </div>
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__taL69
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "All properties in one place, giving you unprecedented control and speed."
                    : "“与 Frame 相比，Section 有一个独立的、更集中的使用场景，\nSection 的嵌套和选择行为也不同于 Frame。”\n- keeyen @figma "}
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__doqre)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__wft5C)}
                  color={"figma" as const}
                  endIcon={
                    <RightArrowIcon
                      className={classNames(projectcss.all, sty.svg__k8XSs)}
                      role={"img"}
                    />
                  }
                  link={
                    "https://www.figma.com/community/plugin/1105082111167032053/Figma-Section" as const
                  }
                  showEndIcon={true}
                >
                  {"开始使用"}
                </Button>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__er3NN)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__x2Gz9)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/pro_layout_panel_landing_pgae/images/coverCnpng.png",
                    fullWidth: 1920,
                    fullHeight: 960,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </p.Stack>
          </Section>

          <Section
            data-plasmic-name={"solutions"}
            data-plasmic-override={overrides.solutions}
            className={classNames("__wab_instance", sty.solutions)}
            hasSubtitle={true}
            hasTitle={true}
            subtitle={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qvLLv
                )}
              >
                {
                  "Section 可以给你的设计文件带来更强的信息结构性，这在协作和交接中特别有用"
                }
              </div>
            }
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fxBI
                )}
                id={"feature" as const}
              >
                {"Section 有什么用？"}
              </div>
            }
          >
            <Reveal
              className={classNames("__wab_instance", sty.reveal___5D8Sp)}
              direction={"up" as const}
              duration={500 as const}
              effect={"fade" as const}
              triggerOnce={true}
            >
              <VideoExample
                className={classNames(
                  "__wab_instance",
                  sty.videoExample___5EMke
                )}
                slot={
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kIhAb
                      )}
                    >
                      {"清晰的板块划分"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nY1M
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "No flyout menus and dropdowns, everything stays where they appear."
                        : "你的协作者和前端开发不再需要逐个查看 Frame 内容来了解你的设计稿结构"}
                    </div>
                  </React.Fragment>
                }
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__jgpRh)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/pro_layout_panel_landing_pgae/images/screenShot20220530At093233Png.png",
                    fullWidth: 2522,
                    fullHeight: 1490,
                    aspectRatio: undefined
                  }}
                />
              </VideoExample>
            </Reveal>

            <Reveal
              className={classNames("__wab_instance", sty.reveal__lmUbb)}
              direction={"up" as const}
              duration={500 as const}
              effect={"fade" as const}
              triggerOnce={true}
            >
              <VideoExample
                className={classNames(
                  "__wab_instance",
                  sty.videoExample__iWMdB
                )}
                reversedLayout={true}
                slot={
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9OBex
                      )}
                    >
                      {"组件变体结构记述"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nY1M
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "No flyout menus and dropdowns, everything stays where they appear."
                        : "现在你可以使用 Section 来更好地记录组件变体的规则，以便在以后回访时更易于解读维护。"}
                    </div>
                  </React.Fragment>
                }
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___3Jjw0)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/pro_layout_panel_landing_pgae/images/image9.png",
                    fullWidth: 1740,
                    fullHeight: 822,
                    aspectRatio: undefined
                  }}
                />
              </VideoExample>
            </Reveal>
          </Section>

          <Section
            data-plasmic-name={"howItWorks"}
            data-plasmic-override={overrides.howItWorks}
            className={classNames("__wab_instance", sty.howItWorks)}
            hasSubtitle={true}
            hasTitle={true}
            subtitle={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___14Ws
                )}
              >
                {
                  "Figma section 是基于 Figma 原生支持构建的，所以你不必担心在没有打开插件的情况下无法编辑/复制它们。"
                }
              </div>
            }
            title={"其他的亮点功能"}
          >
            <Reveal
              cascade={true}
              className={classNames("__wab_instance", sty.reveal__eq0Oq)}
              damping={0.5 as const}
              direction={"up" as const}
              duration={500 as const}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___1Qyc)}
              >
                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__klleB
                  )}
                  description={
                    "在6套个预设主题中快速切换到你需要的颜色 (描边可通过 fill 自动计算)"
                  }
                  iconFront={
                    <Icon22Icon
                      className={classNames(projectcss.all, sty.svg__ghRl2)}
                      role={"img"}
                    />
                  }
                  title={"多套默认皮肤"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard___4UWmj
                  )}
                  description={
                    "没有插件的协作者也可以随心所欲的复制和编辑 Section"
                  }
                  iconFront={
                    <Icon25Icon
                      className={classNames(projectcss.all, sty.svg__tm6V)}
                      role={"img"}
                    />
                  }
                  title={"原生支持"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__htmfK
                  )}
                  description={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oNkWc
                      )}
                    >
                      {
                        "Section 可以被无限的嵌套在 Section 体内，每级的名称都将被显示"
                      }
                    </div>
                  }
                  iconFront={
                    <Icon26Icon
                      className={classNames(projectcss.all, sty.svg__wtPhq)}
                      role={"img"}
                    />
                  }
                  title={"无限嵌套"}
                />
              </p.Stack>
            </Reveal>
          </Section>

          <Section
            data-plasmic-name={"pricingSection"}
            data-plasmic-override={overrides.pricingSection}
            className={classNames("__wab_instance", sty.pricingSection)}
            hasSubtitle={true}
            hasTitle={true}
            subtitle={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lij0Q
                )}
              >
                {
                  "该插件提供 2 个文件内的无限制免费试用，更多文件需要许可证密钥才能激活、一次性购买以供终身使用+免费更新。"
                }
              </div>
            }
            title={
              <p.PlasmicLink
                data-plasmic-name={"pricing"}
                data-plasmic-override={overrides.pricing}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.pricing
                )}
                component={Link}
                id={"price" as const}
                platform={"nextjs"}
              >
                {"一次购买 永久使用"}
              </p.PlasmicLink>
            }
          >
            <Reveal
              cascade={true}
              className={classNames("__wab_instance", sty.reveal___8Qj4S)}
              direction={"up" as const}
              duration={500 as const}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__tydTa)}>
                  <Plan
                    className={classNames("__wab_instance", sty.plan__st0Ba)}
                    description={
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qtW5
                        )}
                      >
                        <Bullet
                          className={classNames(
                            "__wab_instance",
                            sty.bullet__uxjMv
                          )}
                        >
                          {"2个文件"}
                        </Bullet>

                        <Bullet
                          className={classNames(
                            "__wab_instance",
                            sty.bullet__xNhYb
                          )}
                        >
                          {"免费更新"}
                        </Bullet>
                      </p.Stack>
                    }
                    name={"初心者"}
                    name2={"免费试用"}
                    price={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cbxqC
                        )}
                      >
                        {"¥0"}
                      </div>
                    }
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___8Lhqq
                      )}
                      color={"outline" as const}
                      link={
                        "https://www.figma.com/community/plugin/1105082111167032053/Figma-Section" as const
                      }
                    >
                      {"开始使用"}
                    </Button>
                  </Plan>
                </div>

                <div className={classNames(projectcss.all, sty.column___2L7OE)}>
                  <Plan
                    className={classNames("__wab_instance", sty.plan___13IcI)}
                    color={"blue" as const}
                    description={
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1WF0Y
                        )}
                      >
                        <Bullet
                          className={classNames(
                            "__wab_instance",
                            sty.bullet__m7Sl2
                          )}
                        >
                          {"无文件限制"}
                        </Bullet>

                        <Bullet
                          className={classNames(
                            "__wab_instance",
                            sty.bullet__utskn
                          )}
                        >
                          {"免费更新"}
                        </Bullet>

                        <Bullet
                          className={classNames(
                            "__wab_instance",
                            sty.bullet__ju6Hi
                          )}
                        >
                          {"技术支持"}
                        </Bullet>
                      </p.Stack>
                    }
                    name={"专业"}
                    name2={"一个账户"}
                    price={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0N3Gx
                        )}
                      >
                        {"¥31.99"}
                      </div>
                    }
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__qyTzo
                      )}
                      color={"figma" as const}
                      link={
                        "https://mianbaoduo.com/o/bread/mbd-Ypqcl55u" as const
                      }
                    >
                      {"立即购买"}
                    </Button>
                  </Plan>
                </div>

                <div className={classNames(projectcss.all, sty.column__qZfjt)}>
                  <Plan
                    className={classNames("__wab_instance", sty.plan__srwIa)}
                    color={"purle" as const}
                    description={
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hfuv3
                        )}
                      >
                        <Bullet
                          className={classNames(
                            "__wab_instance",
                            sty.bullet__xPuTf
                          )}
                        >
                          {"无文件限制"}
                        </Bullet>

                        <Bullet
                          className={classNames(
                            "__wab_instance",
                            sty.bullet__s9JqB
                          )}
                        >
                          {"免费更新"}
                        </Bullet>

                        <Bullet
                          className={classNames(
                            "__wab_instance",
                            sty.bullet__shufL
                          )}
                        >
                          {"技术支持"}
                        </Bullet>
                      </p.Stack>
                    }
                    name={"团队"}
                    name2={"团队的所有人"}
                    price={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oVhmv
                        )}
                      >
                        {"¥？"}
                      </div>
                    }
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__v1Syp
                      )}
                      color={"purple" as const}
                      link={"" as const}
                    >
                      {"微信咨询 sunshuaiqi1993"}
                    </Button>
                  </Plan>
                </div>
              </p.Stack>
            </Reveal>
          </Section>

          <Section
            data-plasmic-name={"howItWorks2"}
            data-plasmic-override={overrides.howItWorks2}
            className={classNames("__wab_instance", sty.howItWorks2)}
            hasSubtitle={true}
            hasTitle={true}
            subtitle={null}
            title={"别人怎么说"}
          >
            <Reveal
              cascade={true}
              className={classNames("__wab_instance", sty.reveal___1ICv)}
              damping={0.5 as const}
              direction={"up" as const}
              duration={500 as const}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__pyZg0)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___51Xe)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vycTk)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__nd7H)}
                        displayHeight={"100%" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/pro_layout_panel_landing_pgae/images/image10.png",
                          fullWidth: 400,
                          fullHeight: 400,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qHNq)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xhQZm
                        )}
                      >
                        {"四喜茶茶 @Moonvy"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__waKzc
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile")
                          ? "Menu items for shortcuts"
                          : "“一下秒杀 设计图管理的插件了”"}
                      </div>
                    </div>
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__x2S9N)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__fkNnh)}
                    displayHeight={"56px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"56px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/pro_layout_panel_landing_pgae/images/image8.png",
                      fullWidth: 400,
                      fullHeight: 400,
                      aspectRatio: undefined
                    }}
                  />

                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6PcNf
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iFRwn
                        )}
                      >
                        {"Rogie @Figma"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___96Pea
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile")
                          ? "Menu items for shortcuts"
                          : "“Artboard/Frame/Section 这三个东西可能看起来一样，但实际使用意图与上下文是不同的。”"}
                      </div>
                    </div>
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tfKU)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__iEq7R)}
                    displayHeight={"56px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"56px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/pro_layout_panel_landing_pgae/images/image2.png",
                      fullWidth: 400,
                      fullHeight: 400,
                      aspectRatio: undefined
                    }}
                  />

                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__meUlh)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zULh
                        )}
                      >
                        {"Utsav Sheth"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__avW2Z
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile")
                          ? "Menu items for shortcuts"
                          : "“感谢 Figma Section。\n1. 帮助我保持画版的条理性\n2. 不需要手动画分割线”"}
                      </div>
                    </div>
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rmVx8)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ujLt)}
                    displayHeight={"56px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"56px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/pro_layout_panel_landing_pgae/images/image3.png",
                      fullWidth: 400,
                      fullHeight: 400,
                      aspectRatio: undefined
                    }}
                  />

                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7SYjD
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wvfLr
                        )}
                      >
                        {"鈴木慎吾 @TSUMIKI INC."}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__e0Bl
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile")
                          ? "Menu items for shortcuts"
                          : "“Figma添加的Section功能非常好。\n手动将想要分类的元素框在一个矩形里，再给它们打上标签，然后分组，这样的工作现在更容易、更干净了。”"}
                      </div>
                    </div>
                  ) : null}
                </p.Stack>
              </p.Stack>
            </Reveal>
          </Section>

          <Section
            className={classNames("__wab_instance", sty.section__inygm)}
            hasSubtitle={true}
            hasTitle={true}
            subtitle={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mXg1I
                )}
              >
                {
                  "Figma Section将继续接收更新，以进一步增强体验，以下是计划在未来版本加入的功能，让我知道你的想法:)"
                }
              </div>
            }
            title={"计划中的功能..."}
          >
            <Reveal
              cascade={true}
              className={classNames("__wab_instance", sty.reveal__mhjj9)}
              damping={0.5 as const}
              direction={"up" as const}
              duration={500 as const}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rnP)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__y53Ti)}
                >
                  <Icon8Icon
                    className={classNames(projectcss.all, sty.svg__tPRuK)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xKjZs
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Menu items for shortcuts"
                      : "预设颜色自定义"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__p9RjZ)}
                >
                  <Icon13Icon
                    className={classNames(projectcss.all, sty.svg__zLzsb)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gkBjJ
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Menu items for shortcuts"
                      : "动态间距计算"}
                  </div>
                </p.Stack>
              </p.Stack>
            </Reveal>
          </Section>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          >
            {"Designed and developed by Mr.Biscuit and boybook. "}
          </Footer>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "topSection",
    "solutions",
    "howItWorks",
    "pricingSection",
    "pricing",
    "columns",
    "howItWorks2",
    "footer"
  ],
  header: ["header"],
  topSection: ["topSection"],
  solutions: ["solutions"],
  howItWorks: ["howItWorks"],
  pricingSection: ["pricingSection", "pricing", "columns"],
  pricing: ["pricing"],
  columns: ["columns"],
  howItWorks2: ["howItWorks2"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  topSection: typeof Section;
  solutions: typeof Section;
  howItWorks: typeof Section;
  pricingSection: typeof Section;
  pricing: "a";
  columns: "div";
  howItWorks2: typeof Section;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFigmaSectionChinese__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFigmaSectionChinese__VariantsArgs;
    args?: PlasmicFigmaSectionChinese__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFigmaSectionChinese__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFigmaSectionChinese__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFigmaSectionChinese__ArgProps,
          internalVariantPropNames: PlasmicFigmaSectionChinese__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFigmaSectionChinese__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFigmaSectionChinese";
  } else {
    func.displayName = `PlasmicFigmaSectionChinese.${nodeName}`;
  }
  return func;
}

export const PlasmicFigmaSectionChinese = Object.assign(
  // Top-level PlasmicFigmaSectionChinese renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    topSection: makeNodeComponent("topSection"),
    solutions: makeNodeComponent("solutions"),
    howItWorks: makeNodeComponent("howItWorks"),
    pricingSection: makeNodeComponent("pricingSection"),
    pricing: makeNodeComponent("pricing"),
    columns: makeNodeComponent("columns"),
    howItWorks2: makeNodeComponent("howItWorks2"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicFigmaSectionChinese
    internalVariantProps: PlasmicFigmaSectionChinese__VariantProps,
    internalArgProps: PlasmicFigmaSectionChinese__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFigmaSectionChinese;
/* prettier-ignore-end */
