// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qDNA17RfdgsM73kkELPPxa
// Component: AuERE4DOLn
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Video } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: RhitNJW5Zu-/codeComponent

import { useScreenVariants as useScreenVariants_3KhhFf1Cq1Qfos } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 3KhhFf1CQ1QFOS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_outline_to_single_stroke_css from "../outline_to_single_stroke/plasmic_outline_to_single_stroke.module.css"; // plasmic-import: 56iVbBJXbx9hFxysoAGHJC/projectcss
import projectcss from "./plasmic_pro_layout_panel_landing_pgae.module.css"; // plasmic-import: qDNA17RfdgsM73kkELPPxa/projectcss
import sty from "./PlasmicVideoExample.module.css"; // plasmic-import: AuERE4DOLn/css

export type PlasmicVideoExample__VariantMembers = {
  reversedLayout: "reversedLayout";
};

export type PlasmicVideoExample__VariantsArgs = {
  reversedLayout?: SingleBooleanChoiceArg<"reversedLayout">;
};

type VariantPropType = keyof PlasmicVideoExample__VariantsArgs;
export const PlasmicVideoExample__VariantProps = new Array<VariantPropType>(
  "reversedLayout"
);

export type PlasmicVideoExample__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicVideoExample__ArgsType;
export const PlasmicVideoExample__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicVideoExample__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultVideoExampleProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  reversedLayout?: SingleBooleanChoiceArg<"reversedLayout">;
  className?: string;
}

function PlasmicVideoExample__RenderFunc(props: {
  variants: PlasmicVideoExample__VariantsArgs;
  args: PlasmicVideoExample__ArgsType;
  overrides: PlasmicVideoExample__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_3KhhFf1Cq1Qfos()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_outline_to_single_stroke_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootreversedLayout]: hasVariant(
            variants,
            "reversedLayout",
            "reversedLayout"
          )
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.column__pC6Ly)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <Video
              autoPlay={true}
              className={classNames("__wab_instance", sty.htmlVideo__dZlW1)}
              controls={true}
              loop={true}
              muted={true}
              playsInline={false}
              preload={"auto" as const}
              src={
                "https://sunshuaiqi.wistia.com/medias/qkimmzmphd/download?media_file_id=748263719" as const
              }
            />
          ),

          value: args.children
        })}
      </div>

      <div className={classNames(projectcss.all, sty.column__tBrIl)}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__siFjz
                  )}
                >
                  {"Shortest Navigation"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gjlIt
                  )}
                >
                  {"No flyout menus, everything stays where they appear."}
                </div>
              </React.Fragment>
            ),
            value: args.slot
          })}
        </p.Stack>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVideoExample__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVideoExample__VariantsArgs;
    args?: PlasmicVideoExample__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVideoExample__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicVideoExample__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicVideoExample__ArgProps,
          internalVariantPropNames: PlasmicVideoExample__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicVideoExample__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVideoExample";
  } else {
    func.displayName = `PlasmicVideoExample.${nodeName}`;
  }
  return func;
}

export const PlasmicVideoExample = Object.assign(
  // Top-level PlasmicVideoExample renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicVideoExample
    internalVariantProps: PlasmicVideoExample__VariantProps,
    internalArgProps: PlasmicVideoExample__ArgProps
  }
);

export default PlasmicVideoExample;
/* prettier-ignore-end */
