// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qDNA17RfdgsM73kkELPPxa
// Component: Xh2O--6vZNn
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: gCP9N_nn5MCbJS/component
import Button from "../../Button"; // plasmic-import: s3E0QheUTMLIRg/component
import Section from "../../Section"; // plasmic-import: polj06cVBtzpxl/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import VideoExample from "../../VideoExample"; // plasmic-import: AuERE4DOLn/component
import FeatureCard from "../../FeatureCard"; // plasmic-import: 8J_TITQjji4-M9/component
import Plan from "../../Plan"; // plasmic-import: IC0peUQeOrc-TC/component
import Bullet from "../../Bullet"; // plasmic-import: h8iasHjPSdhGL5/component
import Footer from "../../Footer"; // plasmic-import: 48OR7NBtqAcun7/component

import { useScreenVariants as useScreenVariants_3KhhFf1Cq1Qfos } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 3KhhFf1CQ1QFOS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_outline_to_single_stroke_css from "../outline_to_single_stroke/plasmic_outline_to_single_stroke.module.css"; // plasmic-import: 56iVbBJXbx9hFxysoAGHJC/projectcss
import projectcss from "./plasmic_pro_layout_panel_landing_pgae.module.css"; // plasmic-import: qDNA17RfdgsM73kkELPPxa/projectcss
import sty from "./PlasmicFigmaSection.module.css"; // plasmic-import: Xh2O--6vZNn/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: r_TPt86vHV4SXb/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: FfSoXEgUCW0G_l/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: PK0IXvxdsy/icon
import Icon25Icon from "./icons/PlasmicIcon__Icon25"; // plasmic-import: kuMSi66yKA/icon
import Icon26Icon from "./icons/PlasmicIcon__Icon26"; // plasmic-import: KRTK6f0Lc0/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: nx8ckd2R4tXE/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: Ao0rL4yuRk/icon

export type PlasmicFigmaSection__VariantMembers = {};

export type PlasmicFigmaSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicFigmaSection__VariantsArgs;
export const PlasmicFigmaSection__VariantProps = new Array<VariantPropType>();

export type PlasmicFigmaSection__ArgsType = {};
type ArgPropType = keyof PlasmicFigmaSection__ArgsType;
export const PlasmicFigmaSection__ArgProps = new Array<ArgPropType>();

export type PlasmicFigmaSection__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  topSection?: p.Flex<typeof Section>;
  solutions?: p.Flex<typeof Section>;
  howItWorks?: p.Flex<typeof Section>;
  pricingSection?: p.Flex<typeof Section>;
  pricing?: p.Flex<"a"> & Partial<LinkProps>;
  columns?: p.Flex<"div">;
  howItWorks2?: p.Flex<typeof Section>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultFigmaSectionProps {}

function PlasmicFigmaSection__RenderFunc(props: {
  variants: PlasmicFigmaSection__VariantsArgs;
  args: PlasmicFigmaSection__ArgsType;
  overrides: PlasmicFigmaSection__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_3KhhFf1Cq1Qfos()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_outline_to_single_stroke_css.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
            slot={"Figma Section"}
            slot2={
              <React.Fragment>
                <Button
                  className={classNames("__wab_instance", sty.button__j0RSm)}
                  color={"clear" as const}
                  link={"#feature" as const}
                  size={"compact" as const}
                >
                  {"Features"}
                </Button>

                <Button
                  className={classNames("__wab_instance", sty.button__oJeTt)}
                  color={"clear" as const}
                  link={"#price" as const}
                  size={"compact" as const}
                >
                  {"Pricing"}
                </Button>

                <Button
                  className={classNames("__wab_instance", sty.button__bNgA6)}
                  color={"clear" as const}
                  link={`/figmasection_cn`}
                  size={"compact" as const}
                >
                  {"中文"}
                </Button>
              </React.Fragment>
            }
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__hEr8B)}
              displayHeight={"48px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"48px" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/pro_layout_panel_landing_pgae/images/image6.svg",
                fullWidth: 150,
                fullHeight: 150,
                aspectRatio: 1
              }}
            />
          </Header>

          <Section
            data-plasmic-name={"topSection"}
            data-plasmic-override={overrides.topSection}
            className={classNames("__wab_instance", sty.topSection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nv186)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sp085)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__m4FLv)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zMrU8
                    )}
                  >
                    {"Make Figma design"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d81LG
                    )}
                  >
                    {"More Orgnized\n+Easier to navigate"}
                  </div>
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vutmI
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "All properties in one place, giving you unprecedented control and speed."
                    : '"Sections have a separate and more focused use case than Frames, \nSection’s parenting and selection behaviours are also different." \n- keeyen @figma '}
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__iqFz0)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__zi5V9)}
                  color={"figma" as const}
                  endIcon={
                    <RightArrowIcon
                      className={classNames(projectcss.all, sty.svg__dao3L)}
                      role={"img"}
                    />
                  }
                  link={
                    "https://www.figma.com/community/plugin/1105082111167032053/Figma-Section" as const
                  }
                  showEndIcon={true}
                >
                  {"Try it out now"}
                </Button>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__lNn1)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__nm3Kd)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/pro_layout_panel_landing_pgae/images/image7.png",
                    fullWidth: 1920,
                    fullHeight: 960,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </p.Stack>
          </Section>

          <Section
            data-plasmic-name={"solutions"}
            data-plasmic-override={overrides.solutions}
            className={classNames("__wab_instance", sty.solutions)}
            hasSubtitle={true}
            hasTitle={true}
            subtitle={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__t4SKk
                )}
              >
                {
                  "Sections can make your design file more structured and informative, this is especially helpful in collaboration and handoff"
                }
              </div>
            }
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pLvkx
                )}
                id={"feature" as const}
              >
                {"How does it help?"}
              </div>
            }
          >
            <Reveal
              className={classNames("__wab_instance", sty.reveal__nOwKl)}
              direction={"up" as const}
              duration={500 as const}
              effect={"fade" as const}
              triggerOnce={true}
            >
              <VideoExample
                className={classNames("__wab_instance", sty.videoExample__mVgT)}
                slot={
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___56LLx
                      )}
                    >
                      {"Clarified Design\nClusters"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nY1M
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "No flyout menus and dropdowns, everything stays where they appear."
                        : "Your collaborators and front end devs no longer have to go through each frame to catch up with your designs"}
                    </div>
                  </React.Fragment>
                }
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___89CUv)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/pro_layout_panel_landing_pgae/images/screenShot20220530At093233Png.png",
                    fullWidth: 2522,
                    fullHeight: 1490,
                    aspectRatio: undefined
                  }}
                />
              </VideoExample>
            </Reveal>

            <Reveal
              className={classNames("__wab_instance", sty.reveal__lmUbb)}
              direction={"up" as const}
              duration={500 as const}
              effect={"fade" as const}
              triggerOnce={true}
            >
              <VideoExample
                className={classNames(
                  "__wab_instance",
                  sty.videoExample__bboX3
                )}
                reversedLayout={true}
                slot={
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gWqTu
                      )}
                    >
                      {"Document  Component Variants"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nY1M
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "No flyout menus and dropdowns, everything stays where they appear."
                        : "You can now use sections to better document your component variants so it's easier to maintain when you come back to them at a later time."}
                    </div>
                  </React.Fragment>
                }
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__ekRj)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/pro_layout_panel_landing_pgae/images/image9.png",
                    fullWidth: 1740,
                    fullHeight: 822,
                    aspectRatio: undefined
                  }}
                />
              </VideoExample>
            </Reveal>
          </Section>

          <Section
            data-plasmic-name={"howItWorks"}
            data-plasmic-override={overrides.howItWorks}
            className={classNames("__wab_instance", sty.howItWorks)}
            hasSubtitle={true}
            hasTitle={true}
            subtitle={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hbBZ
                )}
              >
                {
                  "Figma sections is built with native support in mind, so you don't have to worry about not being able to edit them without the plugin open."
                }
              </div>
            }
            title={"Some other features"}
          >
            <Reveal
              cascade={true}
              className={classNames("__wab_instance", sty.reveal__ddj9N)}
              damping={0.5 as const}
              direction={"up" as const}
              duration={500 as const}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___9S0Q4)}
              >
                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__uv1K2
                  )}
                  description={"Quickly switch between 6 ready made themes"}
                  iconFront={
                    <Icon22Icon
                      className={classNames(projectcss.all, sty.svg__gMPm8)}
                      role={"img"}
                    />
                  }
                  title={"Quick Theming"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__mKf6F
                  )}
                  description={
                    "Collaborators without the plugin can also copy and edit sections"
                  }
                  iconFront={
                    <Icon25Icon
                      className={classNames(projectcss.all, sty.svg__nKkt2)}
                      role={"img"}
                    />
                  }
                  title={"Native support"}
                />

                <FeatureCard
                  className={classNames(
                    "__wab_instance",
                    sty.featureCard__l2Bo9
                  )}
                  description={
                    "Sections can be nested inside of other sections endlessly"
                  }
                  iconFront={
                    <Icon26Icon
                      className={classNames(projectcss.all, sty.svg___8G0O)}
                      role={"img"}
                    />
                  }
                  title={"Infinite Nesting"}
                />
              </p.Stack>
            </Reveal>
          </Section>

          <Section
            data-plasmic-name={"pricingSection"}
            data-plasmic-override={overrides.pricingSection}
            className={classNames("__wab_instance", sty.pricingSection)}
            hasSubtitle={true}
            hasTitle={true}
            subtitle={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ctaC
                )}
              >
                {
                  "The plugin comes with 2 files free trial that lets you use any number of sections, activation will be required for use in additional files. One time purchase for life-time usage."
                }
              </div>
            }
            title={
              <p.PlasmicLink
                data-plasmic-name={"pricing"}
                data-plasmic-override={overrides.pricing}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.pricing
                )}
                component={Link}
                id={"price" as const}
                platform={"nextjs"}
              >
                {"Buy Once, User Forever"}
              </p.PlasmicLink>
            }
          >
            <Reveal
              cascade={true}
              className={classNames("__wab_instance", sty.reveal__jng3G)}
              direction={"up" as const}
              duration={500 as const}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__wroCu)}>
                  <Plan
                    className={classNames("__wab_instance", sty.plan__vxZ0U)}
                    description={
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zBBs
                        )}
                      >
                        <Bullet
                          className={classNames(
                            "__wab_instance",
                            sty.bullet___3X7S1
                          )}
                        >
                          {"Two files"}
                        </Bullet>

                        <Bullet
                          className={classNames(
                            "__wab_instance",
                            sty.bullet___4TtFj
                          )}
                        >
                          {"Free updates"}
                        </Bullet>
                      </p.Stack>
                    }
                    name={"Starter"}
                    name2={"free trial"}
                    price={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___75E8W
                        )}
                      >
                        {"$0"}
                      </div>
                    }
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__vvyzw
                      )}
                      color={"outline" as const}
                      link={
                        "https://www.figma.com/community/plugin/1105082111167032053/Figma-Section" as const
                      }
                    >
                      {"Get Started"}
                    </Button>
                  </Plan>
                </div>

                <div className={classNames(projectcss.all, sty.column__wcuVq)}>
                  <Plan
                    className={classNames("__wab_instance", sty.plan__acCb7)}
                    color={"blue" as const}
                    description={
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__v1Z4V
                        )}
                      >
                        <Bullet
                          className={classNames(
                            "__wab_instance",
                            sty.bullet__iYjRg
                          )}
                        >
                          {"Unlimited files"}
                        </Bullet>

                        <Bullet
                          className={classNames(
                            "__wab_instance",
                            sty.bullet__tO2J
                          )}
                        >
                          {"Free updates"}
                        </Bullet>

                        <Bullet
                          className={classNames(
                            "__wab_instance",
                            sty.bullet__d62JM
                          )}
                        >
                          {"Technical Support"}
                        </Bullet>
                      </p.Stack>
                    }
                    name={"Professional"}
                    name2={"One account"}
                    price={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ddOVl
                        )}
                      >
                        {"$5"}
                      </div>
                    }
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__u3VDa
                      )}
                      color={"figma" as const}
                      link={
                        "https://mrbiscuit.gumroad.com/l/detnuo?variant=Individual" as const
                      }
                    >
                      {"Buy Now"}
                    </Button>
                  </Plan>
                </div>

                <div className={classNames(projectcss.all, sty.column__gioeo)}>
                  <Plan
                    className={classNames("__wab_instance", sty.plan__ahYyw)}
                    color={"purle" as const}
                    description={
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xBot
                        )}
                      >
                        <Bullet
                          className={classNames(
                            "__wab_instance",
                            sty.bullet__oKoMl
                          )}
                        >
                          {"Unlimited files"}
                        </Bullet>

                        <Bullet
                          className={classNames(
                            "__wab_instance",
                            sty.bullet__hyklu
                          )}
                        >
                          {"Free updates"}
                        </Bullet>

                        <Bullet
                          className={classNames(
                            "__wab_instance",
                            sty.bullet__y1KjO
                          )}
                        >
                          {"Technical Support"}
                        </Bullet>
                      </p.Stack>
                    }
                    name={"Team"}
                    name2={"Everyone in your team"}
                    price={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gu1ZH
                        )}
                      >
                        {"$15"}
                      </div>
                    }
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__jz7E2
                      )}
                      color={"purple" as const}
                      link={
                        "https://mrbiscuit.gumroad.com/l/detnuo?variant=Team" as const
                      }
                    >
                      {"Buy Now"}
                    </Button>
                  </Plan>
                </div>
              </p.Stack>
            </Reveal>
          </Section>

          <Section
            data-plasmic-name={"howItWorks2"}
            data-plasmic-override={overrides.howItWorks2}
            className={classNames("__wab_instance", sty.howItWorks2)}
            hasSubtitle={true}
            hasTitle={true}
            subtitle={null}
            title={"What others say"}
          >
            <Reveal
              cascade={true}
              className={classNames("__wab_instance", sty.reveal___3C4Sj)}
              damping={0.5 as const}
              direction={"up" as const}
              duration={500 as const}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rrr8K)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__g3TOy)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vmsJs)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__gb7Tp)}
                        displayHeight={"100%" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/pro_layout_panel_landing_pgae/images/image10.png",
                          fullWidth: 400,
                          fullHeight: 400,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__aZygm)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ndFhs
                        )}
                      >
                        {"Moonvy"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__y0Frh
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile")
                          ? "Menu items for shortcuts"
                          : '"An instant kill to design management plugins and softwares."'}
                      </div>
                    </div>
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fuUhc)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__pbI1Q)}
                    displayHeight={"56px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"56px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/pro_layout_panel_landing_pgae/images/image8.png",
                      fullWidth: 400,
                      fullHeight: 400,
                      aspectRatio: undefined
                    }}
                  />

                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xrctr)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q5Ci9
                        )}
                      >
                        {"Papito"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__v9493
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile")
                          ? "Menu items for shortcuts"
                          : '"Artboard/Frame/Section: may be considered the same, tho infer different intent with use / context"'}
                      </div>
                    </div>
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__shpk6)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__fEDoG)}
                    displayHeight={"56px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"56px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/pro_layout_panel_landing_pgae/images/image2.png",
                      fullWidth: 400,
                      fullHeight: 400,
                      aspectRatio: undefined
                    }}
                  />

                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6Cp0L
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eTDgz
                        )}
                      >
                        {"Utsav Sheth"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ko0Dq
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile")
                          ? "Menu items for shortcuts"
                          : '"Thank you for the New Figma sections.\n1. Help me to stay organized on my board\n2. No need to use Dividers "'}
                      </div>
                    </div>
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__emrBs)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__auBjN)}
                    displayHeight={"56px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"56px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/pro_layout_panel_landing_pgae/images/image3.png",
                      fullWidth: 400,
                      fullHeight: 400,
                      aspectRatio: undefined
                    }}
                  />

                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__k9Vti)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jpU4I
                        )}
                      >
                        {"鈴木慎吾 / TSUMIKI INC."}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tuG8Z
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile")
                          ? "Menu items for shortcuts"
                          : '"The Section function added to Figma is very good.\n The manual work of enclosing the elements you want to classify in a rectangle, labeling them, and grouping them is now easier and cleaner."'}
                      </div>
                    </div>
                  ) : null}
                </p.Stack>
              </p.Stack>
            </Reveal>
          </Section>

          <Section
            className={classNames("__wab_instance", sty.section__oKaTh)}
            hasSubtitle={true}
            hasTitle={true}
            subtitle={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2TU4
                )}
              >
                {
                  "Figma Section will continue to receive updates to further enhance the experience, below are features that are planned to come in future version, let me know your thoughts :) "
                }
              </div>
            }
            title={"Planned Features..."}
          >
            <Reveal
              cascade={true}
              className={classNames("__wab_instance", sty.reveal__hjFpo)}
              damping={0.5 as const}
              direction={"up" as const}
              duration={500 as const}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xuMsZ)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__z03La)}
                >
                  <Icon8Icon
                    className={classNames(projectcss.all, sty.svg__kcd27)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4CVrb
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Menu items for shortcuts"
                      : "Color presets customization"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__k3UPk)}
                >
                  <Icon13Icon
                    className={classNames(projectcss.all, sty.svg__cY4E3)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bkCg
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Menu items for shortcuts"
                      : "Dynamic Padding Calculation"}
                  </div>
                </p.Stack>
              </p.Stack>
            </Reveal>
          </Section>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          >
            {"Designed and developed by Mr.Biscuit and boybook. "}
          </Footer>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "topSection",
    "solutions",
    "howItWorks",
    "pricingSection",
    "pricing",
    "columns",
    "howItWorks2",
    "footer"
  ],
  header: ["header"],
  topSection: ["topSection"],
  solutions: ["solutions"],
  howItWorks: ["howItWorks"],
  pricingSection: ["pricingSection", "pricing", "columns"],
  pricing: ["pricing"],
  columns: ["columns"],
  howItWorks2: ["howItWorks2"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  topSection: typeof Section;
  solutions: typeof Section;
  howItWorks: typeof Section;
  pricingSection: typeof Section;
  pricing: "a";
  columns: "div";
  howItWorks2: typeof Section;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFigmaSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFigmaSection__VariantsArgs;
    args?: PlasmicFigmaSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFigmaSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFigmaSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFigmaSection__ArgProps,
          internalVariantPropNames: PlasmicFigmaSection__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFigmaSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFigmaSection";
  } else {
    func.displayName = `PlasmicFigmaSection.${nodeName}`;
  }
  return func;
}

export const PlasmicFigmaSection = Object.assign(
  // Top-level PlasmicFigmaSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    topSection: makeNodeComponent("topSection"),
    solutions: makeNodeComponent("solutions"),
    howItWorks: makeNodeComponent("howItWorks"),
    pricingSection: makeNodeComponent("pricingSection"),
    pricing: makeNodeComponent("pricing"),
    columns: makeNodeComponent("columns"),
    howItWorks2: makeNodeComponent("howItWorks2"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicFigmaSection
    internalVariantProps: PlasmicFigmaSection__VariantProps,
    internalArgProps: PlasmicFigmaSection__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFigmaSection;
/* prettier-ignore-end */
