// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qDNA17RfdgsM73kkELPPxa
// Component: 9IyHljfnvH
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_outline_to_single_stroke_css from "../outline_to_single_stroke/plasmic_outline_to_single_stroke.module.css"; // plasmic-import: 56iVbBJXbx9hFxysoAGHJC/projectcss
import projectcss from "../pro_layout_panel_landing_pgae/plasmic_pro_layout_panel_landing_pgae.module.css"; // plasmic-import: qDNA17RfdgsM73kkELPPxa/projectcss
import sty from "./PlasmicUnStyledButton.module.css"; // plasmic-import: 9IyHljfnvH/css

import Icon33Icon from "./icons/PlasmicIcon__Icon33"; // plasmic-import: m2qCIW6_G-/icon
import Vector19Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Vector19"; // plasmic-import: KN1g5LXUG/icon

export type PlasmicUnStyledButton__VariantMembers = {
  cta: "cta";
  icon: "icon";
  discord: "discord";
};

export type PlasmicUnStyledButton__VariantsArgs = {
  cta?: SingleBooleanChoiceArg<"cta">;
  icon?: SingleBooleanChoiceArg<"icon">;
  discord?: SingleBooleanChoiceArg<"discord">;
};

type VariantPropType = keyof PlasmicUnStyledButton__VariantsArgs;
export const PlasmicUnStyledButton__VariantProps = new Array<VariantPropType>(
  "cta",
  "icon",
  "discord"
);

export type PlasmicUnStyledButton__ArgsType = {
  children?: React.ReactNode;
  link?: string;
};

type ArgPropType = keyof PlasmicUnStyledButton__ArgsType;
export const PlasmicUnStyledButton__ArgProps = new Array<ArgPropType>(
  "children",
  "link"
);

export type PlasmicUnStyledButton__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultUnStyledButtonProps {
  children?: React.ReactNode;
  link?: string;
  cta?: SingleBooleanChoiceArg<"cta">;
  icon?: SingleBooleanChoiceArg<"icon">;
  discord?: SingleBooleanChoiceArg<"discord">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicUnStyledButton__RenderFunc(props: {
  variants: PlasmicUnStyledButton__VariantsArgs;
  args: PlasmicUnStyledButton__ArgsType;
  overrides: PlasmicUnStyledButton__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "cta",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.cta : undefined
      },

      {
        path: "icon",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.icon : undefined
      },

      {
        path: "discord",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.discord : undefined
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_outline_to_single_stroke_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootcta]: hasVariant($state, "cta", "cta"),
          [sty.rootcta_icon]:
            hasVariant($state, "cta", "cta") &&
            hasVariant($state, "icon", "icon"),
          [sty.rootdiscord]: hasVariant($state, "discord", "discord"),
          [sty.rooticon]: hasVariant($state, "icon", "icon")
        }
      )}
      component={Link}
      href={args.link}
      platform={"nextjs"}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      {p.renderPlasmicSlot({
        defaultContents: "Pricing",
        value: args.children,
        className: classNames(sty.slotTargetChildren, {
          [sty.slotTargetChildrencta]: hasVariant($state, "cta", "cta"),
          [sty.slotTargetChildrencta_icon]:
            hasVariant($state, "cta", "cta") &&
            hasVariant($state, "icon", "icon"),
          [sty.slotTargetChildrendiscord]: hasVariant(
            $state,
            "discord",
            "discord"
          ),
          [sty.slotTargetChildrenicon]: hasVariant($state, "icon", "icon")
        })
      })}

      {(
        hasVariant($state, "cta", "cta") &&
        hasVariant($state, "icon", "icon") &&
        triggers.hover_root
          ? true
          : hasVariant($state, "icon", "icon")
          ? true
          : true
      ) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__xqoU, {
            [sty.freeBoxcta_icon__xqoU2ICxVERkT0]:
              hasVariant($state, "cta", "cta") &&
              hasVariant($state, "icon", "icon"),
            [sty.freeBoxdiscord__xqoUm5Yzd]: hasVariant(
              $state,
              "discord",
              "discord"
            ),
            [sty.freeBoxicon__xqoUeRkT0]: hasVariant($state, "icon", "icon")
          })}
        >
          {(
            hasVariant($state, "cta", "cta") &&
            hasVariant($state, "icon", "icon") &&
            triggers.hover_root
              ? true
              : hasVariant($state, "icon", "icon")
              ? true
              : true
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox___7M7XH, {
                [sty.freeBoxcta_icon___7M7XH2ICxVERkT0]:
                  hasVariant($state, "cta", "cta") &&
                  hasVariant($state, "icon", "icon"),
                [sty.freeBoxicon___7M7XHeRkT0]: hasVariant(
                  $state,
                  "icon",
                  "icon"
                )
              })}
            />
          ) : null}
          {(
            hasVariant($state, "cta", "cta") &&
            hasVariant($state, "icon", "icon") &&
            triggers.hover_root
              ? true
              : hasVariant($state, "icon", "icon")
              ? true
              : false
          ) ? (
            <Icon33Icon
              className={classNames(projectcss.all, sty.svg__rQMgY, {
                [sty.svgcta_icon__rQMgY2ICxVERkT0]:
                  hasVariant($state, "cta", "cta") &&
                  hasVariant($state, "icon", "icon"),
                [sty.svgicon__rQMgYeRkT0]: hasVariant($state, "icon", "icon")
              })}
              role={"img"}
            />
          ) : null}
        </p.Stack>
      ) : null}
      {(hasVariant($state, "discord", "discord") ? true : false) ? (
        <Vector19Icon
          className={classNames(projectcss.all, sty.svg___6UXk0, {
            [sty.svgdiscord___6UXk0M5Yzd]: hasVariant(
              $state,
              "discord",
              "discord"
            )
          })}
          role={"img"}
        />
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUnStyledButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUnStyledButton__VariantsArgs;
    args?: PlasmicUnStyledButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUnStyledButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUnStyledButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicUnStyledButton__ArgProps,
          internalVariantPropNames: PlasmicUnStyledButton__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicUnStyledButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUnStyledButton";
  } else {
    func.displayName = `PlasmicUnStyledButton.${nodeName}`;
  }
  return func;
}

export const PlasmicUnStyledButton = Object.assign(
  // Top-level PlasmicUnStyledButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicUnStyledButton
    internalVariantProps: PlasmicUnStyledButton__VariantProps,
    internalArgProps: PlasmicUnStyledButton__ArgProps
  }
);

export default PlasmicUnStyledButton;
/* prettier-ignore-end */
