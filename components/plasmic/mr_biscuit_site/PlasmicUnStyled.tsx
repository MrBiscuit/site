// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qDNA17RfdgsM73kkELPPxa
// Component: 0VvvxOmc0M
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import UnStyledButton from "../../UnStyledButton"; // plasmic-import: 9IyHljfnvH/component
import { Motion } from "../../Animate"; // plasmic-import: xjL7Mr59UJ/codeComponent
import { Text } from "@chakra-ui/react"; // plasmic-import: GwrfPQ0Lynu/codeComponent
import { Typewriter } from "react-simple-typewriter"; // plasmic-import: _wC7mwePtk/codeComponent
import UnstyledNavItem from "../../UnstyledNavItem"; // plasmic-import: oTpWPg9u2R/component
import UnstyledNavItemSubItem from "../../UnstyledNavItemSubItem"; // plasmic-import: c3-xwhQPkN8/component
import UnstyledSegemented from "../../UnstyledSegemented"; // plasmic-import: CnyTEdcn7w/component
import UnstyledDemoButton from "../../UnstyledDemoButton"; // plasmic-import: PZC_D0OEbs/component
import UnstyledRadio from "../../UnstyledRadio"; // plasmic-import: 3nGVGX_H4w/component
import UnstyledSwitch from "../../UnstyledSwitch"; // plasmic-import: mk11Af_XHM/component
import UnstyledCheckbox from "../../UnstyledCheckbox"; // plasmic-import: fYHVVFh75H/component
import TextInput from "../../TextInput"; // plasmic-import: 7I48dDLBiI4vYE/component
import UnstyledTabs from "../../UnstyledTabs"; // plasmic-import: d4weC4A-AC/component
import UnStyledPagination from "../../UnStyledPagination"; // plasmic-import: j-zq1RSVcV/component
import Rate from "../../Rate"; // plasmic-import: 1gM6u15t6Q/component
import UnstyledStar from "../../UnstyledStar"; // plasmic-import: vKnKnMdjXV/component
import UnstyledAvatar from "../../UnstyledAvatar"; // plasmic-import: MrJiOwdVal/component
import UnstyledDropdown from "../../UnstyledDropdown"; // plasmic-import: zQM7IHkPTi/component
import UnstyledDropdownMenu from "../../UnstyledDropdownMenu"; // plasmic-import: 3yi4QiloTF/component
import UnstyledDropdownMenuItem from "../../UnstyledDropdownMenuItem"; // plasmic-import: onwC6FbbBj/component
import IconLink from "../../IconLink"; // plasmic-import: 1VSJl1M4qMed7Q/component

import { useScreenVariants as useScreenVariants_3KhhFf1Cq1Qfos } from "../pro_layout_panel_landing_pgae/PlasmicGlobalVariant__Screen"; // plasmic-import: 3KhhFf1CQ1QFOS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_outline_to_single_stroke_css from "../outline_to_single_stroke/plasmic_outline_to_single_stroke.module.css"; // plasmic-import: 56iVbBJXbx9hFxysoAGHJC/projectcss
import projectcss from "../pro_layout_panel_landing_pgae/plasmic_pro_layout_panel_landing_pgae.module.css"; // plasmic-import: qDNA17RfdgsM73kkELPPxa/projectcss
import sty from "./PlasmicUnStyled.module.css"; // plasmic-import: 0VvvxOmc0M/css

import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: E6ZcFdEu9Q/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: -PFqTUHSM8/icon
import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: YiIRCnOcuU/icon
import Icon30Icon from "./icons/PlasmicIcon__Icon30"; // plasmic-import: fTykVWwuoF/icon
import Icon54Icon from "./icons/PlasmicIcon__Icon54"; // plasmic-import: plvXl2zxQM/icon
import Globe06Icon from "./icons/PlasmicIcon__Globe06"; // plasmic-import: c9dVyZw-IZ/icon
import Icon41Icon from "./icons/PlasmicIcon__Icon41"; // plasmic-import: VpWG7TJuBB/icon
import Icon44Icon from "./icons/PlasmicIcon__Icon44"; // plasmic-import: YzsZRDIwF/icon
import Icon43Icon from "./icons/PlasmicIcon__Icon43"; // plasmic-import: Ti8G85Uyfl/icon
import Icon46Icon from "./icons/PlasmicIcon__Icon46"; // plasmic-import: SGT94EDcsv/icon
import Icon50Icon from "./icons/PlasmicIcon__Icon50"; // plasmic-import: tXD03IOEWU/icon
import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: g2dh3c4C8D/icon
import Icon52Icon from "./icons/PlasmicIcon__Icon52"; // plasmic-import: 0Yjmm_jjZc/icon
import Icon42Icon from "./icons/PlasmicIcon__Icon42"; // plasmic-import: rRVoKaOrfR/icon
import Icon45Icon from "./icons/PlasmicIcon__Icon45"; // plasmic-import: e0oxOdXVZf/icon
import Icon47Icon from "./icons/PlasmicIcon__Icon47"; // plasmic-import: shlOqfP7Oe/icon
import Icon48Icon from "./icons/PlasmicIcon__Icon48"; // plasmic-import: SKnxidbPbw/icon
import Icon49Icon from "./icons/PlasmicIcon__Icon49"; // plasmic-import: tUiPkJlq-j/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: T0dSDQfvxR/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: nqBPTk3cO/icon
import Icon36Icon from "./icons/PlasmicIcon__Icon36"; // plasmic-import: _BGhawlqpJ/icon
import ChecksvgIcon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Checksvg"; // plasmic-import: r_TPt86vHV4SXb/icon
import Icon51Icon from "./icons/PlasmicIcon__Icon51"; // plasmic-import: _AYgKmW_aR/icon
import Icon56Icon from "./icons/PlasmicIcon__Icon56"; // plasmic-import: XuYf6ufEk1/icon
import Icon57Icon from "./icons/PlasmicIcon__Icon57"; // plasmic-import: Bfj59BVPAt/icon
import Icon58Icon from "./icons/PlasmicIcon__Icon58"; // plasmic-import: 5p0wU6DBid/icon
import Icon59Icon from "./icons/PlasmicIcon__Icon59"; // plasmic-import: Cd0Qv4bMM/icon
import Icon37Icon from "./icons/PlasmicIcon__Icon37"; // plasmic-import: WHV25Sv77u/icon
import TwitterIconIcon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__TwitterIcon"; // plasmic-import: fXUwwdElPSPysi/icon
import FigmasvgIcon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Figmasvg"; // plasmic-import: xchrs1LLb/icon
import Vector19Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Vector19"; // plasmic-import: KN1g5LXUG/icon

export type PlasmicUnStyled__VariantMembers = {};

export type PlasmicUnStyled__VariantsArgs = {};
type VariantPropType = keyof PlasmicUnStyled__VariantsArgs;
export const PlasmicUnStyled__VariantProps = new Array<VariantPropType>();

export type PlasmicUnStyled__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicUnStyled__ArgsType;
export const PlasmicUnStyled__ArgProps = new Array<ArgPropType>("children");

export type PlasmicUnStyled__OverridesType = {
  root?: p.Flex<"div">;
  frame3?: p.Flex<"div">;
  frame6?: p.Flex<"div">;
  frame5?: p.Flex<"div">;
  aMinimal?: p.Flex<"div">;
  frame4?: p.Flex<"div">;
  corner?: p.Flex<"div">;
  corner3?: p.Flex<"div">;
  corner5?: p.Flex<"div">;
  corner4?: p.Flex<"div">;
  _for?: p.Flex<"div">;
  typewriter?: p.Flex<typeof Typewriter>;
  unstyledSegemented?: p.Flex<typeof UnstyledSegemented>;
  text2?: p.Flex<"div">;
  text4?: p.Flex<"div">;
  text5?: p.Flex<"div">;
  text3?: p.Flex<"div">;
  text6?: p.Flex<"div">;
  unstyledSwitch?: p.Flex<typeof UnstyledSwitch>;
  textInput?: p.Flex<typeof TextInput>;
  unstyledTabs?: p.Flex<typeof UnstyledTabs>;
  unStyledPagination?: p.Flex<typeof UnStyledPagination>;
  unstyledRate?: p.Flex<typeof Rate>;
  unstyledDropdown?: p.Flex<typeof UnstyledDropdown>;
  unstyledDropdownMenu?: p.Flex<typeof UnstyledDropdownMenu>;
  textbox?: p.Flex<typeof TextInput>;
};

export interface DefaultUnStyledProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicUnStyled__RenderFunc(props: {
  variants: PlasmicUnStyled__VariantsArgs;
  args: PlasmicUnStyled__ArgsType;
  overrides: PlasmicUnStyled__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_3KhhFf1Cq1Qfos()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_outline_to_single_stroke_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___4BIe8)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__g8Bba
              )}
            >
              {"UnStyled"}
            </div>

            {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__x0Gd)}
              >
                <UnStyledButton
                  className={classNames(
                    "__wab_instance",
                    sty.unStyledButton__aiGzn
                  )}
                />

                <UnStyledButton
                  className={classNames(
                    "__wab_instance",
                    sty.unStyledButton__ripUq
                  )}
                  link={
                    "https://www.figma.com/file/rbyg2yfXvQHo3HbjguKRFO/UnStyled?node-id=1345%3A16731&t=Hrstvng7a2Yl0ugJ-0" as const
                  }
                >
                  {"Preview in Figma"}
                </UnStyledButton>

                <UnStyledButton
                  className={classNames(
                    "__wab_instance",
                    sty.unStyledButton__tna8D
                  )}
                  cta={true}
                >
                  {"Get Early Access"}
                </UnStyledButton>
              </p.Stack>
            ) : null}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame3"}
            data-plasmic-override={overrides.frame3}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame3)}
          >
            <div
              data-plasmic-name={"frame6"}
              data-plasmic-override={overrides.frame6}
              className={classNames(projectcss.all, sty.frame6)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame5"}
                data-plasmic-override={overrides.frame5}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame5)}
              >
                <Motion
                  className={classNames("__wab_instance", sty.motion__ugaei)}
                  from={{ y: 0 }}
                  isChildren={false}
                  to={{
                    y: 12,
                    transition: {
                      repeat: "Infinity",
                      duration: 4,
                      repeatType: "reverse"
                    }
                  }}
                >
                  <Icon27Icon
                    className={classNames(projectcss.all, sty.svg__mlKZf)}
                    role={"img"}
                  />
                </Motion>

                <div
                  data-plasmic-name={"aMinimal"}
                  data-plasmic-override={overrides.aMinimal}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.aMinimal
                  )}
                >
                  {"A minimal"}
                </div>

                <div
                  data-plasmic-name={"frame4"}
                  data-plasmic-override={overrides.frame4}
                  className={classNames(projectcss.all, sty.frame4)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kkOzL
                    )}
                  >
                    {"boilerplate"}
                  </div>

                  <div
                    data-plasmic-name={"corner"}
                    data-plasmic-override={overrides.corner}
                    className={classNames(projectcss.all, sty.corner)}
                  />

                  <div
                    data-plasmic-name={"corner3"}
                    data-plasmic-override={overrides.corner3}
                    className={classNames(projectcss.all, sty.corner3)}
                  />

                  <div
                    data-plasmic-name={"corner5"}
                    data-plasmic-override={overrides.corner5}
                    className={classNames(projectcss.all, sty.corner5)}
                  />

                  <div
                    data-plasmic-name={"corner4"}
                    data-plasmic-override={overrides.corner4}
                    className={classNames(projectcss.all, sty.corner4)}
                  />
                </div>

                <div
                  data-plasmic-name={"_for"}
                  data-plasmic-override={overrides._for}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty._for
                  )}
                >
                  {"for "}
                </div>

                <Motion
                  className={classNames("__wab_instance", sty.motion__onP7V)}
                  from={{ y: 0 }}
                  isChildren={false}
                  to={{
                    y: 12,
                    transition: {
                      delay: 2,
                      repeat: "Infinity",
                      duration: 4,
                      repeatType: "reverse"
                    }
                  }}
                >
                  <Icon28Icon
                    className={classNames(projectcss.all, sty.svg___0Zdw0)}
                    role={"img"}
                  />
                </Motion>
              </p.Stack>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__uX9N)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ymVwv
                    )}
                  >
                    {"the most"}
                  </div>

                  <Text
                    className={classNames("__wab_instance", sty.text__oM3Uw)}
                  >
                    <Typewriter
                      data-plasmic-name={"typewriter"}
                      data-plasmic-override={overrides.typewriter}
                      className={classNames("__wab_instance", sty.typewriter)}
                      cursor={true}
                      cursorStyle={"|" as const}
                      delaySpeed={3000 as const}
                      deleteSpeed={30 as const}
                      loop={0 as const}
                      typeSpeed={undefined}
                      words={["future prove", "reusable", "composable"]}
                    />
                  </Text>
                </p.Stack>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__rcQwq)}>
                  <Motion
                    className={classNames("__wab_instance", sty.motion__g0G2B)}
                    from={{ y: 0, rotate: 0 }}
                    isChildren={false}
                    to={{
                      y: 12,
                      rotate: 5,
                      transition: {
                        delay: 3,
                        repeat: "Infinity",
                        duration: 4,
                        repeatType: "reverse"
                      }
                    }}
                  >
                    <Icon29Icon
                      className={classNames(projectcss.all, sty.svg__e7Bkm)}
                      role={"img"}
                    />
                  </Motion>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bLsiS
                    )}
                  >
                    {"Design Systems in Figma"}
                  </div>

                  <Motion
                    className={classNames("__wab_instance", sty.motion__wj4IN)}
                    from={{ y: 0 }}
                    isChildren={false}
                    to={{
                      y: 12,
                      transition: {
                        delay: 0.35,
                        repeat: "Infinity",
                        duration: 4,
                        repeatType: "reverse"
                      }
                    }}
                  >
                    <Icon30Icon
                      className={classNames(projectcss.all, sty.svg__bNzKi)}
                      role={"img"}
                    />
                  </Motion>
                </div>
              ) : null}
            </div>

            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cc0D8)}
              >
                <UnStyledButton
                  className={classNames(
                    "__wab_instance",
                    sty.unStyledButton___0YPH
                  )}
                  discord={true}
                  link={"https://discord.gg/t8uASknrc6" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p5WHi
                    )}
                  >
                    {"Join Our Discord"}
                  </div>
                </UnStyledButton>

                <UnStyledButton
                  className={classNames(
                    "__wab_instance",
                    sty.unStyledButton__icQ6B
                  )}
                  cta={true}
                  icon={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ehoP
                    )}
                  >
                    {"Sign up for Early Access"}
                  </div>
                </UnStyledButton>
              </p.Stack>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox___4LlBd)}>
                <Motion
                  className={classNames("__wab_instance", sty.motion___7Q8Tc)}
                  from={{ y: 0, opacity: 1 }}
                  isChildren={false}
                  to={{
                    y: 40,
                    opacity: 0,
                    transition: { duration: 1.5, repeatDelay: 1, repeat: 4 }
                  }}
                >
                  <Icon54Icon
                    className={classNames(projectcss.all, sty.svg__u6VVa)}
                    role={"img"}
                  />
                </Motion>
              </div>
            ) : null}
          </p.Stack>

          <div className={classNames(projectcss.all, sty.freeBox___1T2Cd)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7Txkn
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <span
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.span__cq0S
                    )}
                  >
                    {"Apply your own "}
                  </span>
                }
                <React.Fragment>{""}</React.Fragment>
                {
                  <span
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.span__de1W1
                    )}
                  >
                    {"Design Token "}
                  </span>
                }
                <React.Fragment>{""}</React.Fragment>
                {
                  <span
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.span___6Y6Q0
                    )}
                  >
                    {"decisions."}
                  </span>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>

            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___6Qom)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ax10C)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__gqb4G)}
                    >
                      <Globe06Icon
                        className={classNames(projectcss.all, sty.svg__maqm)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fr4GW
                        )}
                      >
                        {"Logoname"}
                      </div>
                    </p.Stack>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__fIsA)}
                    >
                      <UnstyledNavItem
                        className={classNames(
                          "__wab_instance",
                          sty.unstyledNavItem__rXslU
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bLpet
                          )}
                        >
                          {"Home"}
                        </div>
                      </UnstyledNavItem>

                      <UnstyledNavItem
                        className={classNames(
                          "__wab_instance",
                          sty.unstyledNavItem__jZTu5
                        )}
                        icon={
                          <Icon44Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__j26T3
                            )}
                            role={"img"}
                          />
                        }
                        isGroup={true}
                        slot={
                          <React.Fragment>
                            <UnstyledNavItemSubItem
                              children2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__uqFJw
                                  )}
                                >
                                  {"Unread"}
                                </div>
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.unstyledNavItemSubItem__ye7Kw
                              )}
                              icon2={
                                <Icon43Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__lW3Vu
                                  )}
                                  role={"img"}
                                />
                              }
                            />

                            <UnstyledNavItemSubItem
                              children2={"Sent"}
                              className={classNames(
                                "__wab_instance",
                                sty.unstyledNavItemSubItem__t3Xuj
                              )}
                              icon2={
                                <Icon46Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__a6Z4
                                  )}
                                  role={"img"}
                                />
                              }
                            />

                            <UnstyledNavItemSubItem
                              children2={"Draft"}
                              className={classNames(
                                "__wab_instance",
                                sty.unstyledNavItemSubItem__aiQn9
                              )}
                              icon2={
                                <Icon50Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__ezY3U
                                  )}
                                  role={"img"}
                                />
                              }
                            />
                          </React.Fragment>
                        }
                      >
                        {"Inbox"}
                      </UnstyledNavItem>

                      <UnstyledNavItem
                        className={classNames(
                          "__wab_instance",
                          sty.unstyledNavItem__oE6
                        )}
                        icon={
                          <Icon34Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__podza
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__epvrt
                          )}
                        >
                          {"Activity"}
                        </div>
                      </UnstyledNavItem>

                      <UnstyledNavItem
                        className={classNames(
                          "__wab_instance",
                          sty.unstyledNavItem__jkJB
                        )}
                        icon={
                          <Icon52Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__p0Hyo
                            )}
                            role={"img"}
                          />
                        }
                        isGroup={true}
                        slot={
                          <React.Fragment>
                            <UnstyledNavItemSubItem
                              children2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__gxJEj
                                  )}
                                >
                                  {"Social"}
                                </div>
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.unstyledNavItemSubItem__dI0ID
                              )}
                              icon2={
                                <Icon42Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__dQvc
                                  )}
                                  role={"img"}
                                />
                              }
                            />

                            <UnstyledNavItemSubItem
                              children2={"Files"}
                              className={classNames(
                                "__wab_instance",
                                sty.unstyledNavItemSubItem__amSMs
                              )}
                              icon2={
                                <Icon45Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__w4R9O
                                  )}
                                  role={"img"}
                                />
                              }
                            />

                            <UnstyledNavItemSubItem
                              children2={"Spams"}
                              className={classNames(
                                "__wab_instance",
                                sty.unstyledNavItemSubItem__xI7Gy
                              )}
                              icon2={
                                <Icon47Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__zCeJ5
                                  )}
                                  role={"img"}
                                />
                              }
                            />
                          </React.Fragment>
                        }
                      >
                        {"Categories"}
                      </UnstyledNavItem>

                      <UnstyledNavItem
                        className={classNames(
                          "__wab_instance",
                          sty.unstyledNavItem__cps5M
                        )}
                        icon={
                          <Icon48Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__f0Qv
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oLlPn
                          )}
                        >
                          {"Settings"}
                        </div>
                      </UnstyledNavItem>

                      <UnstyledNavItem
                        className={classNames(
                          "__wab_instance",
                          sty.unstyledNavItem__s7IzO
                        )}
                        icon={
                          <Icon49Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__jOTg8
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___18Who
                          )}
                        >
                          {"Help"}
                        </div>
                      </UnstyledNavItem>
                    </div>
                  </div>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__kbuc3)}
                  >
                    <UnstyledSegemented
                      data-plasmic-name={"unstyledSegemented"}
                      data-plasmic-override={overrides.unstyledSegemented}
                      className={classNames(
                        "__wab_instance",
                        sty.unstyledSegemented
                      )}
                    />

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zoW6Y
                        )}
                      >
                        <UnstyledDemoButton
                          className={classNames(
                            "__wab_instance",
                            sty.unstyledDemoButton__fREzr
                          )}
                          isPrimary={true}
                          text={
                            <div
                              data-plasmic-name={"text2"}
                              data-plasmic-override={overrides.text2}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text2
                              )}
                            >
                              {"Primary Button"}
                            </div>
                          }
                        />

                        <UnstyledDemoButton
                          className={classNames(
                            "__wab_instance",
                            sty.unstyledDemoButton__xDRkt
                          )}
                          isIcon={true}
                          isPrimary={true}
                          text={
                            <div
                              data-plasmic-name={"text4"}
                              data-plasmic-override={overrides.text4}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text4
                              )}
                            >
                              {"Split Button"}
                            </div>
                          }
                        >
                          <Icon20Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___7Qtm
                            )}
                            role={"img"}
                          />
                        </UnstyledDemoButton>

                        <UnstyledDemoButton
                          className={classNames(
                            "__wab_instance",
                            sty.unstyledDemoButton__hKc9H
                          )}
                          hasSplit={true}
                          text={
                            <div
                              data-plasmic-name={"text5"}
                              data-plasmic-override={overrides.text5}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text5
                              )}
                            >
                              {"Split Button"}
                            </div>
                          }
                        />
                      </p.Stack>
                    ) : null}
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ylyIk
                        )}
                      >
                        <UnstyledRadio
                          className={classNames(
                            "__wab_instance",
                            sty.unstyledRadio__zQFfR
                          )}
                          text3={
                            <div
                              data-plasmic-name={"text3"}
                              data-plasmic-override={overrides.text3}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text3
                              )}
                            >
                              {"Radio"}
                            </div>
                          }
                        />

                        <UnstyledRadio
                          checked={true}
                          className={classNames(
                            "__wab_instance",
                            sty.unstyledRadio__hgobq
                          )}
                          text3={
                            <div
                              data-plasmic-name={"text6"}
                              data-plasmic-override={overrides.text6}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text6
                              )}
                            >
                              {"Checked"}
                            </div>
                          }
                        />

                        <UnstyledSwitch
                          data-plasmic-name={"unstyledSwitch"}
                          data-plasmic-override={overrides.unstyledSwitch}
                          className={classNames(
                            "__wab_instance",
                            sty.unstyledSwitch
                          )}
                        />
                      </p.Stack>
                    ) : null}
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__viMo2
                        )}
                      >
                        <UnstyledCheckbox
                          className={classNames(
                            "__wab_instance",
                            sty.unstyledCheckbox__xEgW2
                          )}
                        />

                        <UnstyledCheckbox
                          className={classNames(
                            "__wab_instance",
                            sty.unstyledCheckbox___0LlZm
                          )}
                          isChecked={true}
                          text7={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pGzlC
                              )}
                            >
                              {"Checked"}
                            </div>
                          }
                        />

                        <UnstyledCheckbox
                          className={classNames(
                            "__wab_instance",
                            sty.unstyledCheckbox__ky2Rc
                          )}
                          isChecked={true}
                          isMixed={true}
                          text7={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__i35Cf
                              )}
                            >
                              {"Mixed"}
                            </div>
                          }
                        />
                      </p.Stack>
                    ) : null}

                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      className={classNames("__wab_instance", sty.textInput)}
                    />

                    <UnstyledTabs
                      data-plasmic-name={"unstyledTabs"}
                      data-plasmic-override={overrides.unstyledTabs}
                      className={classNames("__wab_instance", sty.unstyledTabs)}
                    />

                    <UnStyledPagination
                      data-plasmic-name={"unStyledPagination"}
                      data-plasmic-override={overrides.unStyledPagination}
                      className={classNames(
                        "__wab_instance",
                        sty.unStyledPagination
                      )}
                    />

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xicF4
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2VujY
                          )}
                        >
                          {"Rating:"}
                        </div>

                        <Rate
                          data-plasmic-name={"unstyledRate"}
                          data-plasmic-override={overrides.unstyledRate}
                          className={classNames(
                            "__wab_instance",
                            sty.unstyledRate
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__j1LMj
                          )}
                        />

                        <UnstyledAvatar
                          className={classNames(
                            "__wab_instance",
                            sty.unstyledAvatar__aLa4F
                          )}
                        />

                        <UnstyledAvatar
                          className={classNames(
                            "__wab_instance",
                            sty.unstyledAvatar__dN0Jf
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__j5X71)}
                            displayHeight={"auto" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"auto" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/mr_biscuit_site/images/avatar2.png",
                              fullWidth: 400,
                              fullHeight: 400,
                              aspectRatio: undefined
                            }}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mPkAu
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zp38
                              )}
                            >
                              {"5"}
                            </div>
                          </div>
                        </UnstyledAvatar>

                        <UnstyledAvatar
                          className={classNames(
                            "__wab_instance",
                            sty.unstyledAvatar__xMuZs
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__yrNc)}
                            displayHeight={"auto" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"auto" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/mr_biscuit_site/images/avatar3.png",
                              fullWidth: 400,
                              fullHeight: 400,
                              aspectRatio: undefined
                            }}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__r1Cj
                            )}
                          >
                            <Icon51Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__b8QOq
                              )}
                              role={"img"}
                            />
                          </div>
                        </UnstyledAvatar>
                      </p.Stack>
                    ) : null}

                    <div
                      className={classNames(projectcss.all, sty.freeBox__l4M3Q)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xymMk
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yyVIg
                          )}
                        >
                          {"Name"}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1TCz2
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lqrFa
                          )}
                        >
                          {"Title"}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mFeV
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zbpsn
                          )}
                        >
                          {"Status"}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7BzMp
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__j2Z5
                          )}
                        >
                          {"Actions"}
                        </div>
                      </div>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ujkjF
                        )}
                      >
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fkWyW
                            )}
                          >
                            <Icon56Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__khlI
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fp7Cm
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xDguY
                              )}
                            >
                              {"Name"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sa9Vm
                              )}
                            >
                              {"tony.reichert@example.com"}
                            </div>
                          </div>
                        ) : null}
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__x5VQw
                        )}
                      >
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jh70O
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___17N5D
                              )}
                            >
                              {"CEO"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jw8H
                              )}
                            >
                              {"Management"}
                            </div>
                          </div>
                        ) : null}
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xvxG2
                        )}
                      >
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___29Jh
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kSy8
                              )}
                            >
                              {"Active"}
                            </div>
                          </div>
                        ) : null}
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jPks5
                        )}
                      >
                        <Icon57Icon
                          className={classNames(projectcss.all, sty.svg__oaStk)}
                          role={"img"}
                        />

                        <Icon58Icon
                          className={classNames(projectcss.all, sty.svg__kjFx4)}
                          role={"img"}
                        />

                        <Icon59Icon
                          className={classNames(projectcss.all, sty.svg__ibkEx)}
                          role={"img"}
                        />
                      </p.Stack>
                    </div>
                  </p.Stack>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__viDpa)}
                  >
                    <UnstyledDropdown
                      data-plasmic-name={"unstyledDropdown"}
                      data-plasmic-override={overrides.unstyledDropdown}
                      className={classNames(
                        "__wab_instance",
                        sty.unstyledDropdown
                      )}
                    />

                    <UnstyledDropdownMenu
                      data-plasmic-name={"unstyledDropdownMenu"}
                      data-plasmic-override={overrides.unstyledDropdownMenu}
                      className={classNames(
                        "__wab_instance",
                        sty.unstyledDropdownMenu
                      )}
                    />
                  </p.Stack>
                ) : null}
              </p.Stack>
            ) : null}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__pmiBc)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hYvq8
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <span
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.span__twKt
                    )}
                  >
                    {"Expand your own Varaints on the most "}
                  </span>
                }
                <React.Fragment>{""}</React.Fragment>
                {
                  <span
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.span__zXmrS
                    )}
                  >
                    {"Composable "}
                  </span>
                }
                <React.Fragment>{""}</React.Fragment>
                {
                  <span
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.span__w1Me
                    )}
                  >
                    {"Architecture"}
                  </span>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__jsPzX)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xgmke)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__duUeE)}>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__bcWol
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {p.renderPlasmicSlot({
                    defaultContents:
                      "Designed and developed by Mr.Biscuit in collaboration with Into Design Systems. ",
                    value: args.children,
                    className: classNames(sty.slotTargetChildren)
                  })}
                </p.PlasmicLink>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pqGZt
                  )}
                >
                  {"All rights reserved."}
                </div>
              </div>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cI8U)}
              >
                {true ? (
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__eWz25
                    )}
                    component={Link}
                    href={"https://twitter.com/SShuaiqi" as const}
                    platform={"nextjs"}
                    target={"_blank" as const}
                  >
                    <IconLink
                      icon={
                        <TwitterIconIcon
                          className={classNames(projectcss.all, sty.svg__qjhRk)}
                          role={"img"}
                        />
                      }
                    />
                  </p.PlasmicLink>
                ) : null}
                {true ? (
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__aTb7J
                    )}
                    component={Link}
                    href={
                      "https://www.figma.com/file/rbyg2yfXvQHo3HbjguKRFO/UnStyled?node-id=1345%3A16731&t=Hrstvng7a2Yl0ugJ-0" as const
                    }
                    platform={"nextjs"}
                    target={"_blank" as const}
                  >
                    <IconLink
                      icon={
                        <FigmasvgIcon
                          className={classNames(projectcss.all, sty.svg__asGJa)}
                          role={"img"}
                        />
                      }
                    />
                  </p.PlasmicLink>
                ) : null}
                {true ? (
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__n2G5R
                    )}
                    component={Link}
                    href={"https://discord.gg/t8uASknrc6" as const}
                    platform={"nextjs"}
                    target={"_blank" as const}
                  >
                    <IconLink
                      icon={
                        <Vector19Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___5PhbP
                          )}
                          role={"img"}
                        />
                      }
                    />
                  </p.PlasmicLink>
                ) : null}
              </p.Stack>
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame3",
    "frame6",
    "frame5",
    "aMinimal",
    "frame4",
    "corner",
    "corner3",
    "corner5",
    "corner4",
    "_for",
    "typewriter",
    "unstyledSegemented",
    "text2",
    "text4",
    "text5",
    "text3",
    "text6",
    "unstyledSwitch",
    "textInput",
    "textbox",
    "unstyledTabs",
    "unStyledPagination",
    "unstyledRate",
    "unstyledDropdown",
    "unstyledDropdownMenu"
  ],
  frame3: [
    "frame3",
    "frame6",
    "frame5",
    "aMinimal",
    "frame4",
    "corner",
    "corner3",
    "corner5",
    "corner4",
    "_for",
    "typewriter"
  ],
  frame6: [
    "frame6",
    "frame5",
    "aMinimal",
    "frame4",
    "corner",
    "corner3",
    "corner5",
    "corner4",
    "_for",
    "typewriter"
  ],
  frame5: [
    "frame5",
    "aMinimal",
    "frame4",
    "corner",
    "corner3",
    "corner5",
    "corner4",
    "_for"
  ],
  aMinimal: ["aMinimal"],
  frame4: ["frame4", "corner", "corner3", "corner5", "corner4"],
  corner: ["corner"],
  corner3: ["corner3"],
  corner5: ["corner5"],
  corner4: ["corner4"],
  _for: ["_for"],
  typewriter: ["typewriter"],
  unstyledSegemented: ["unstyledSegemented"],
  text2: ["text2"],
  text4: ["text4"],
  text5: ["text5"],
  text3: ["text3"],
  text6: ["text6"],
  unstyledSwitch: ["unstyledSwitch"],
  textInput: ["textInput", "textbox"],
  unstyledTabs: ["unstyledTabs"],
  unStyledPagination: ["unStyledPagination"],
  unstyledRate: ["unstyledRate"],
  unstyledDropdown: ["unstyledDropdown"],
  unstyledDropdownMenu: ["unstyledDropdownMenu"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame3: "div";
  frame6: "div";
  frame5: "div";
  aMinimal: "div";
  frame4: "div";
  corner: "div";
  corner3: "div";
  corner5: "div";
  corner4: "div";
  _for: "div";
  typewriter: typeof Typewriter;
  unstyledSegemented: typeof UnstyledSegemented;
  text2: "div";
  text4: "div";
  text5: "div";
  text3: "div";
  text6: "div";
  unstyledSwitch: typeof UnstyledSwitch;
  textInput: typeof TextInput;
  unstyledTabs: typeof UnstyledTabs;
  unStyledPagination: typeof UnStyledPagination;
  unstyledRate: typeof Rate;
  unstyledDropdown: typeof UnstyledDropdown;
  unstyledDropdownMenu: typeof UnstyledDropdownMenu;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUnStyled__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUnStyled__VariantsArgs;
    args?: PlasmicUnStyled__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUnStyled__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUnStyled__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicUnStyled__ArgProps,
          internalVariantPropNames: PlasmicUnStyled__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicUnStyled__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUnStyled";
  } else {
    func.displayName = `PlasmicUnStyled.${nodeName}`;
  }
  return func;
}

export const PlasmicUnStyled = Object.assign(
  // Top-level PlasmicUnStyled renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame3: makeNodeComponent("frame3"),
    frame6: makeNodeComponent("frame6"),
    frame5: makeNodeComponent("frame5"),
    aMinimal: makeNodeComponent("aMinimal"),
    frame4: makeNodeComponent("frame4"),
    corner: makeNodeComponent("corner"),
    corner3: makeNodeComponent("corner3"),
    corner5: makeNodeComponent("corner5"),
    corner4: makeNodeComponent("corner4"),
    _for: makeNodeComponent("_for"),
    typewriter: makeNodeComponent("typewriter"),
    unstyledSegemented: makeNodeComponent("unstyledSegemented"),
    text2: makeNodeComponent("text2"),
    text4: makeNodeComponent("text4"),
    text5: makeNodeComponent("text5"),
    text3: makeNodeComponent("text3"),
    text6: makeNodeComponent("text6"),
    unstyledSwitch: makeNodeComponent("unstyledSwitch"),
    textInput: makeNodeComponent("textInput"),
    unstyledTabs: makeNodeComponent("unstyledTabs"),
    unStyledPagination: makeNodeComponent("unStyledPagination"),
    unstyledRate: makeNodeComponent("unstyledRate"),
    unstyledDropdown: makeNodeComponent("unstyledDropdown"),
    unstyledDropdownMenu: makeNodeComponent("unstyledDropdownMenu"),

    // Metadata about props expected for PlasmicUnStyled
    internalVariantProps: PlasmicUnStyled__VariantProps,
    internalArgProps: PlasmicUnStyled__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicUnStyled;
/* prettier-ignore-end */
