// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qDNA17RfdgsM73kkELPPxa
// Component: PAFe091khx

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import UnStyledButton from "../../UnStyledButton"; // plasmic-import: 9IyHljfnvH/component
import TextInput from "../../TextInput"; // plasmic-import: 7I48dDLBiI4vYE/component

import { useScreenVariants as useScreenVariants_3KhhFf1Cq1Qfos } from "../pro_layout_panel_landing_pgae/PlasmicGlobalVariant__Screen"; // plasmic-import: 3KhhFf1CQ1QFOS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_outline_to_single_stroke_css from "../outline_to_single_stroke/plasmic_outline_to_single_stroke.module.css"; // plasmic-import: 56iVbBJXbx9hFxysoAGHJC/projectcss
import projectcss from "../pro_layout_panel_landing_pgae/plasmic_pro_layout_panel_landing_pgae.module.css"; // plasmic-import: qDNA17RfdgsM73kkELPPxa/projectcss
import sty from "./PlasmicUnstyledget.module.css"; // plasmic-import: PAFe091khx/css

import Icon60Icon from "./icons/PlasmicIcon__Icon60"; // plasmic-import: OpcRpaIUSJ/icon
import ChecksvgIcon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Checksvg"; // plasmic-import: r_TPt86vHV4SXb/icon

export type PlasmicUnstyledget__VariantMembers = {};

export type PlasmicUnstyledget__VariantsArgs = {};
type VariantPropType = keyof PlasmicUnstyledget__VariantsArgs;
export const PlasmicUnstyledget__VariantProps = new Array<VariantPropType>();

export type PlasmicUnstyledget__ArgsType = {};
type ArgPropType = keyof PlasmicUnstyledget__ArgsType;
export const PlasmicUnstyledget__ArgProps = new Array<ArgPropType>();

export type PlasmicUnstyledget__OverridesType = {
  root?: p.Flex<"div">;
  input?: p.Flex<typeof TextInput>;
  svg?: p.Flex<"svg">;
  download?: p.Flex<typeof UnStyledButton>;
};

export interface DefaultUnstyledgetProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUnstyledget__RenderFunc(props: {
  variants: PlasmicUnstyledget__VariantsArgs;
  args: PlasmicUnstyledget__ArgsType;
  overrides: PlasmicUnstyledget__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_3KhhFf1Cq1Qfos()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_outline_to_single_stroke_css.plasmic_tokens,
          sty.root
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__ro7P4)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qk4Vk
            )}
          >
            {"UnStyled"}
          </div>
          {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wa5BR)}
            >
              {true ? (
                <UnStyledButton
                  className={classNames(
                    "__wab_instance",
                    sty.unStyledButton__wMuEd
                  )}
                />
              ) : null}
              <UnStyledButton
                className={classNames(
                  "__wab_instance",
                  sty.unStyledButton__nrH3F
                )}
                link={
                  "https://www.figma.com/file/rbyg2yfXvQHo3HbjguKRFO/UnStyled?node-id=1345%3A16731&t=Hrstvng7a2Yl0ugJ-0" as const
                }
              >
                {"Preview in Figma"}
              </UnStyledButton>
              <UnStyledButton
                className={classNames(
                  "__wab_instance",
                  sty.unStyledButton___0Gx5W
                )}
                cta={true}
                link={
                  "https://intodesignsystems.lemonsqueezy.com/checkout/buy/c2906f14-26ac-445b-92b8-c2419ab7ed8e" as const
                }
              >
                {"Order Now"}
              </UnStyledButton>
            </p.Stack>
          ) : null}
        </div>
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__mUQvg)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uZ0He
              )}
            >
              {"Thank you for purchasing UnStyled!"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pF6I4
              )}
            >
              {"We are shaping the future of design systems!"}
            </div>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox___8Ih4Y)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bt1HQ
                  )}
                >
                  {"Your license key:"}
                </div>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___3TRmD)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cd9Qn
                        )}
                      >
                        <TextInput
                          data-plasmic-name={"input"}
                          data-plasmic-override={overrides.input}
                          className={classNames("__wab_instance", sty.input)}
                          onChange={(...eventArgs) => {
                            p.generateStateOnChangeProp($state, [
                              "input",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }}
                          placeholder={"Please input your license key" as const}
                          startIcon={
                            <Icon60Icon
                              data-plasmic-name={"svg"}
                              data-plasmic-override={overrides.svg}
                              className={classNames(projectcss.all, sty.svg)}
                              role={"img"}
                            />
                          }
                          value={p.generateStateValueProp($state, [
                            "input",
                            "value"
                          ])}
                        />
                      </div>
                    ) : null}
                    <UnStyledButton
                      data-plasmic-name={"download"}
                      data-plasmic-override={overrides.download}
                      className={classNames("__wab_instance", sty.download)}
                      cta={true}
                      link={
                        "https://intodesignsystems.lemonsqueezy.com/checkout/buy/c2906f14-26ac-445b-92b8-c2419ab7ed8e" as const
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hblT
                        )}
                      >
                        {"Verify license"}
                      </div>
                    </UnStyledButton>
                  </p.Stack>
                ) : null}
              </div>
            ) : null}
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "input", "svg", "download"],
  input: ["input", "svg"],
  svg: ["svg"],
  download: ["download"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  input: typeof TextInput;
  svg: "svg";
  download: typeof UnStyledButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUnstyledget__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUnstyledget__VariantsArgs;
    args?: PlasmicUnstyledget__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUnstyledget__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUnstyledget__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicUnstyledget__ArgProps,
          internalVariantPropNames: PlasmicUnstyledget__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUnstyledget__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUnstyledget";
  } else {
    func.displayName = `PlasmicUnstyledget.${nodeName}`;
  }
  return func;
}

export const PlasmicUnstyledget = Object.assign(
  // Top-level PlasmicUnstyledget renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    input: makeNodeComponent("input"),
    svg: makeNodeComponent("svg"),
    download: makeNodeComponent("download"),

    // Metadata about props expected for PlasmicUnstyledget
    internalVariantProps: PlasmicUnstyledget__VariantProps,
    internalArgProps: PlasmicUnstyledget__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicUnstyledget;
/* prettier-ignore-end */
