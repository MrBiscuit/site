// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qDNA17RfdgsM73kkELPPxa
// Component: poGDb8OVIHl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: s3E0QheUTMLIRg/component
import SuperEllipse from "react-superellipse"; // plasmic-import: tA0fNNo2idi/codeComponent
import { Text } from "@chakra-ui/react"; // plasmic-import: GwrfPQ0Lynu/codeComponent
import { Typewriter } from "react-simple-typewriter"; // plasmic-import: _wC7mwePtk/codeComponent
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import { Loop } from "../../Loop"; // plasmic-import: IeAlCi-lqq/codeComponent
import SuperEllipseButton from "../../SuperEllipseButton"; // plasmic-import: BydexUicCD/component
import SideLink from "../../SideLink"; // plasmic-import: Erbgmri1tY/component
import CountUp from "react-countup"; // plasmic-import: O2N6ZlMyi7/codeComponent
import { Tabs } from "@chakra-ui/react"; // plasmic-import: nOpeEreCgRS/codeComponent
import { TabList } from "@chakra-ui/react"; // plasmic-import: cKb2iNjk7_O/codeComponent
import { Tab } from "@chakra-ui/react"; // plasmic-import: ptDIALYbKIV/codeComponent
import { TabPanels } from "@chakra-ui/react"; // plasmic-import: pwT8RtRCh_R/codeComponent
import { TabPanel } from "@chakra-ui/react"; // plasmic-import: LnCppeHbKQZ/codeComponent
import { ParallaxWrapper } from "@plasmicpkgs/react-scroll-parallax"; // plasmic-import: bozP4lLlAZ/codeComponent
import PersonalFooter from "../../PersonalFooter"; // plasmic-import: gYEMnmmnyX8/component

import { useScreenVariants as useScreenVariants_3KhhFf1Cq1Qfos } from "../pro_layout_panel_landing_pgae/PlasmicGlobalVariant__Screen"; // plasmic-import: 3KhhFf1CQ1QFOS/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_outline_to_single_stroke_css from "../outline_to_single_stroke/plasmic_outline_to_single_stroke.module.css"; // plasmic-import: 56iVbBJXbx9hFxysoAGHJC/projectcss
import projectcss from "../pro_layout_panel_landing_pgae/plasmic_pro_layout_panel_landing_pgae.module.css"; // plasmic-import: qDNA17RfdgsM73kkELPPxa/projectcss
import sty from "./PlasmicAbout.module.css"; // plasmic-import: poGDb8OVIHl/css

import ChecksvgIcon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Checksvg"; // plasmic-import: r_TPt86vHV4SXb/icon
import Vector23Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Vector23"; // plasmic-import: MI4L7wd1up/icon
import Vector24Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Vector24"; // plasmic-import: oniAQRJiOR/icon
import Vector25Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Vector25"; // plasmic-import: LcQUNQGhls/icon
import Vector27Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Vector27"; // plasmic-import: icQLjg-8Zy/icon
import Vector32Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Vector32"; // plasmic-import: L3sOXztzUd/icon
import Vector28Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Vector28"; // plasmic-import: NWX4ZwoBxj/icon
import PawIcon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Paw"; // plasmic-import: qCXPl09GbpV/icon
import Icon12Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Icon12"; // plasmic-import: GuzYVTPwfz/icon
import ExtTypeSomethingIcon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__ExtTypeSomething"; // plasmic-import: ZIGopSivYeQ/icon
import JsIcon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Js"; // plasmic-import: _li5UmR3EHI/icon
import Vector29Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Vector29"; // plasmic-import: aOaPmAzV3E/icon
import Vector30Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Vector30"; // plasmic-import: rZqnz2TPLr/icon
import Vector31Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Vector31"; // plasmic-import: CPUa3iJHbg/icon
import Vector19Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Vector19"; // plasmic-import: KN1g5LXUG/icon
import Vector20Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Vector20"; // plasmic-import: e7GgmjrOGT/icon
import Blob5Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Blob5"; // plasmic-import: 0eUqFKVCbB/icon
import Blob4Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Blob4"; // plasmic-import: bJDNy1ealf/icon
import Blob3Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Blob3"; // plasmic-import: 8gOKlW3G9D/icon
import Blob2Icon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Blob2"; // plasmic-import: 9D2b_uWVGA/icon
import BlobIcon from "../pro_layout_panel_landing_pgae/icons/PlasmicIcon__Blob"; // plasmic-import: 1KE4JPl4A8/icon
import ParsIcon from "./icons/PlasmicIcon__Pars"; // plasmic-import: xf9A_AdJl/icon

export type PlasmicAbout__VariantMembers = {};

export type PlasmicAbout__VariantsArgs = {};
type VariantPropType = keyof PlasmicAbout__VariantsArgs;
export const PlasmicAbout__VariantProps = new Array<VariantPropType>();

export type PlasmicAbout__ArgsType = {};
type ArgPropType = keyof PlasmicAbout__ArgsType;
export const PlasmicAbout__ArgProps = new Array<ArgPropType>();

export type PlasmicAbout__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"div">;
  left?: p.Flex<"a"> & Partial<LinkProps>;
  frame1225?: p.Flex<"div">;
  right2?: p.Flex<"div">;
  hero?: p.Flex<"div">;
  right?: p.Flex<"div">;
  typewriter?: p.Flex<typeof Typewriter>;
  arrowReveal?: p.Flex<typeof Reveal>;
  frame1177?: p.Flex<"div">;
  reveal?: p.Flex<typeof Reveal>;
  buttonwrap?: p.Flex<"a"> & Partial<LinkProps>;
  superEllipseButton?: p.Flex<typeof SuperEllipseButton>;
  frame1181?: p.Flex<"div">;
  frame1176?: p.Flex<"div">;
  frame1178?: p.Flex<"div">;
  frame?: p.Flex<"div">;
  frame1179?: p.Flex<"div">;
  image?: p.Flex<"div">;
  frame1180?: p.Flex<"div">;
  page1?: p.Flex<"div">;
  blackNextjs?: p.Flex<"div">;
  nextBlack?: p.Flex<"div">;
  separator2?: p.Flex<"div">;
  side?: p.Flex<"div">;
  content?: p.Flex<"div">;
  counters1?: p.Flex<"div">;
  column1?: p.Flex<"div">;
  counter9?: p.Flex<"div">;
  title9?: p.Flex<"div">;
  title10?: p.Flex<"div">;
  column2?: p.Flex<"div">;
  counter7?: p.Flex<"div">;
  title7?: p.Flex<"div">;
  title8?: p.Flex<"div">;
  column3?: p.Flex<"div">;
  counter5?: p.Flex<"div">;
  title5?: p.Flex<"div">;
  title6?: p.Flex<"div">;
  column4?: p.Flex<"div">;
  counter3?: p.Flex<"div">;
  title3?: p.Flex<"div">;
  title4?: p.Flex<"div">;
  column5?: p.Flex<"div">;
  counter?: p.Flex<"div">;
  title?: p.Flex<"div">;
  title2?: p.Flex<"div">;
  tabs?: p.Flex<typeof Tabs>;
  tabList?: p.Flex<typeof TabList>;
  tabPanels?: p.Flex<typeof TabPanels>;
  scrollParallax?: p.Flex<typeof ParallaxWrapper>;
  frame1234?: p.Flex<"div">;
  image34?: p.Flex<"div">;
  image36?: p.Flex<"div">;
  image35?: p.Flex<"div">;
  image37?: p.Flex<"div">;
  frame1235?: p.Flex<"div">;
  personalFooter?: p.Flex<typeof PersonalFooter>;
};

export interface DefaultAboutProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAbout__RenderFunc(props: {
  variants: PlasmicAbout__VariantsArgs;
  args: PlasmicAbout__ArgsType;
  overrides: PlasmicAbout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_3KhhFf1Cq1Qfos()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_outline_to_single_stroke_css.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            hasGap={true}
            className={classNames(projectcss.all, sty.header)}
          >
            <p.Stack
              as={p.PlasmicLink}
              data-plasmic-name={"left"}
              data-plasmic-override={overrides.left}
              hasGap={true}
              className={classNames(projectcss.all, projectcss.a, sty.left)}
              component={Link}
              href={`/`}
              platform={"nextjs"}
            >
              <div
                data-plasmic-name={"frame1225"}
                data-plasmic-override={overrides.frame1225}
                className={classNames(projectcss.all, sty.frame1225)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kTpd
                  )}
                >
                  {"Biscuit.Design"}
                </div>
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"right2"}
              data-plasmic-override={overrides.right2}
              hasGap={true}
              className={classNames(projectcss.all, sty.right2)}
            >
              <Button
                className={classNames("__wab_instance", sty.button__qoVmP)}
                color={"clear" as const}
                link={`/about`}
                size={"compact" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cyql8
                  )}
                >
                  {"About Me"}
                </div>
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__h9M1)}
                color={"clear" as const}
                link={
                  "https://www.figma.com/preload-editor?fuid=405240457298389341" as const
                }
                size={"compact" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2P97
                  )}
                >
                  {"My Design Works"}
                </div>
              </Button>
            </p.Stack>
          </p.Stack>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__f0OP)}>
              <SuperEllipse
                className={classNames(
                  "__wab_instance",
                  sty.superEllipse__cvrTd
                )}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"hero"}
                    data-plasmic-override={overrides.hero}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.hero)}
                  >
                    <div
                      data-plasmic-name={"right"}
                      data-plasmic-override={overrides.right}
                      className={classNames(projectcss.all, sty.right)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5RBdL
                        )}
                      />

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1MHy
                          )}
                        >
                          <Text
                            className={classNames(
                              "__wab_instance",
                              sty.text__jLbhJ
                            )}
                          >
                            <Typewriter
                              data-plasmic-name={"typewriter"}
                              data-plasmic-override={overrides.typewriter}
                              className={classNames(
                                "__wab_instance",
                                sty.typewriter
                              )}
                              cursor={true}
                              cursorStyle={"|" as const}
                              delaySpeed={5000 as const}
                              deleteSpeed={0 as const}
                              loop={0 as const}
                              typeSpeed={90 as const}
                              words={["Mг. Бisсuiт", "ShuaiQi Sun"]}
                            />
                          </Text>
                        </div>
                      ) : null}
                    </div>
                    {(
                      hasVariant(globalVariants, "screen", "mobile")
                        ? true
                        : true
                    ) ? (
                      <Reveal
                        data-plasmic-name={"arrowReveal"}
                        data-plasmic-override={overrides.arrowReveal}
                        big={true}
                        cascade={true}
                        className={classNames(
                          "__wab_instance",
                          sty.arrowReveal
                        )}
                        effect={"fade" as const}
                        triggerOnce={true}
                      >
                        <Loop
                          className={classNames(
                            "__wab_instance",
                            sty.loop__bn6Op
                          )}
                          interval={500 as const}
                          startIndex={0 as const}
                        >
                          <Vector23Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__w8L2L
                            )}
                            role={"img"}
                          />

                          <Vector24Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___7Jdy
                            )}
                            role={"img"}
                          />

                          <Vector25Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__f1VkQ
                            )}
                            role={"img"}
                          />
                        </Loop>
                        <Loop
                          className={classNames(
                            "__wab_instance",
                            sty.loop__smgE
                          )}
                          interval={500 as const}
                          startIndex={0 as const}
                        >
                          <Vector27Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__lLFvk
                            )}
                            role={"img"}
                          />

                          <Vector32Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___6Yaw
                            )}
                            role={"img"}
                          />

                          <Vector28Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__anxJp
                            )}
                            role={"img"}
                          />
                        </Loop>
                      </Reveal>
                    ) : null}
                    <div
                      data-plasmic-name={"frame1177"}
                      data-plasmic-override={overrides.frame1177}
                      className={classNames(projectcss.all, sty.frame1177)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__deSmR
                        )}
                      >
                        {"Hi there, I’m"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3IT0I
                        )}
                      >
                        {"🥕 Vegan, live in Madrid"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dnsE
                        )}
                      >
                        {"Introverted productivity nerd"}
                      </div>
                    </div>
                    <Reveal
                      data-plasmic-name={"reveal"}
                      data-plasmic-override={overrides.reveal}
                      cascade={true}
                      className={classNames("__wab_instance", sty.reveal)}
                      delay={100 as const}
                      effect={"fade" as const}
                      triggerOnce={true}
                    >
                      <p.Stack
                        as={p.PlasmicLink}
                        data-plasmic-name={"buttonwrap"}
                        data-plasmic-override={overrides.buttonwrap}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.buttonwrap
                        )}
                        component={Link}
                        href={"https://twitter.com/SShuaiqi" as const}
                        platform={"nextjs"}
                        target={"_blank" as const}
                      >
                        <SuperEllipseButton
                          data-plasmic-name={"superEllipseButton"}
                          data-plasmic-override={overrides.superEllipseButton}
                          className={classNames(
                            "__wab_instance",
                            sty.superEllipseButton
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jCuU8
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xzy3D
                              )}
                            >
                              {hasVariant(globalVariants, "screen", "mobile")
                                ? "Follow me"
                                : "Follow me"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___7YyQk
                              )}
                            >
                              <PawIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__xSHm0
                                )}
                                role={"img"}
                              />
                            </div>
                          </p.Stack>
                        </SuperEllipseButton>
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame1181"}
                        data-plasmic-override={overrides.frame1181}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame1181)}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"frame1176"}
                          data-plasmic-override={overrides.frame1176}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame1176)}
                        >
                          <div
                            data-plasmic-name={"frame1178"}
                            data-plasmic-override={overrides.frame1178}
                            className={classNames(
                              projectcss.all,
                              sty.frame1178
                            )}
                          >
                            <div
                              data-plasmic-name={"frame"}
                              data-plasmic-override={overrides.frame}
                              className={classNames(projectcss.all, sty.frame)}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__htUVv)}
                                displayHeight={"19.2px" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"37.953px" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/pro_layout_panel_landing_pgae/images/group2.svg",
                                  fullWidth: 37.953,
                                  fullHeight: 19.2,
                                  aspectRatio: 1.9
                                }}
                              />
                            </div>
                          </div>
                        </p.Stack>
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__quO)}
                          displayHeight={"14.399px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"62.4px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/pro_layout_panel_landing_pgae/images/vercel2.svg",
                            fullWidth: 62.4,
                            fullHeight: 14.399,
                            aspectRatio: 4.2
                          }}
                        />

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"frame1179"}
                          data-plasmic-override={overrides.frame1179}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame1179)}
                        >
                          <div
                            data-plasmic-name={"image"}
                            data-plasmic-override={overrides.image}
                            className={classNames(projectcss.all, sty.image)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__dDbg7
                              )}
                            />
                          </div>
                        </p.Stack>
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jn7Eb
                            )}
                          >
                            <Icon12Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___96Drr
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"frame1180"}
                          data-plasmic-override={overrides.frame1180}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.frame1180)}
                        >
                          <div
                            data-plasmic-name={"page1"}
                            data-plasmic-override={overrides.page1}
                            className={classNames(projectcss.all, sty.page1)}
                          >
                            <div
                              data-plasmic-name={"blackNextjs"}
                              data-plasmic-override={overrides.blackNextjs}
                              className={classNames(
                                projectcss.all,
                                sty.blackNextjs
                              )}
                            >
                              <div
                                data-plasmic-name={"nextBlack"}
                                data-plasmic-override={overrides.nextBlack}
                                className={classNames(
                                  projectcss.all,
                                  sty.nextBlack
                                )}
                              >
                                <ExtTypeSomethingIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__wHjrN
                                  )}
                                  role={"img"}
                                />

                                <JsIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___6SztO
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </div>
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </Reveal>
                  </p.Stack>
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"separator2"}
                    data-plasmic-override={overrides.separator2}
                    className={classNames(projectcss.all, sty.separator2)}
                  >
                    <Loop
                      className={classNames("__wab_instance", sty.loop__tXSD)}
                      interval={500 as const}
                      startIndex={0 as const}
                    >
                      <Vector29Icon
                        className={classNames(projectcss.all, sty.svg__e8AoS)}
                        role={"img"}
                      />

                      <Vector30Icon
                        className={classNames(projectcss.all, sty.svg___5VsJ)}
                        role={"img"}
                      />

                      <Vector31Icon
                        className={classNames(projectcss.all, sty.svg___4OGkC)}
                        role={"img"}
                      />
                    </Loop>
                    <Loop
                      className={classNames("__wab_instance", sty.loop__nahD8)}
                      interval={500 as const}
                      startIndex={1 as const}
                    >
                      <Vector29Icon
                        className={classNames(projectcss.all, sty.svg__nsmzm)}
                        role={"img"}
                      />

                      <Vector30Icon
                        className={classNames(projectcss.all, sty.svg__aYpob)}
                        role={"img"}
                      />

                      <Vector31Icon
                        className={classNames(projectcss.all, sty.svg__pcane)}
                        role={"img"}
                      />
                    </Loop>
                    <Loop
                      className={classNames("__wab_instance", sty.loop__fAoC)}
                      interval={500 as const}
                      startIndex={2 as const}
                    >
                      <Vector29Icon
                        className={classNames(projectcss.all, sty.svg__xDqGp)}
                        role={"img"}
                      />

                      <Vector30Icon
                        className={classNames(projectcss.all, sty.svg__zIrYy)}
                        role={"img"}
                      />

                      <Vector31Icon
                        className={classNames(projectcss.all, sty.svg__lwYm5)}
                        role={"img"}
                      />
                    </Loop>
                  </div>
                ) : null}
              </SuperEllipse>
            </div>
          ) : null}
          <p.Stack
            as={"div"}
            data-plasmic-name={"side"}
            data-plasmic-override={overrides.side}
            hasGap={true}
            className={classNames(projectcss.all, sty.side)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bd9E
              )}
            >
              {"FOLLOW"}
            </div>
            {true ? (
              <SideLink
                className={classNames("__wab_instance", sty.sideLink__xmq6O)}
              />
            ) : null}
            {true ? (
              <SideLink
                className={classNames("__wab_instance", sty.sideLink__edjem)}
                destination={"https://twitter.com/SShuaiqi" as const}
              >
                <Vector20Icon
                  className={classNames(projectcss.all, sty.svg__cWd)}
                  role={"img"}
                />
              </SideLink>
            ) : null}
            {true ? (
              <SideLink
                className={classNames("__wab_instance", sty.sideLink__a8Mt6)}
                destination={
                  "https://www.youtube.com/channel/UCK-Wdz9A5UtgkiHL9a20LpA" as const
                }
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__c3D8C)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/pro_layout_panel_landing_pgae/images/youtube.svg",
                    fullWidth: 27.512,
                    fullHeight: 19.851,
                    aspectRatio: 1.4
                  }}
                />
              </SideLink>
            ) : null}
          </p.Stack>
          <p.Stack
            as={"div"}
            data-plasmic-name={"content"}
            data-plasmic-override={overrides.content}
            hasGap={true}
            className={classNames(projectcss.all, sty.content)}
          >
            {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
              <div
                data-plasmic-name={"counters1"}
                data-plasmic-override={overrides.counters1}
                className={classNames(projectcss.all, sty.counters1)}
              >
                <div
                  data-plasmic-name={"column1"}
                  data-plasmic-override={overrides.column1}
                  className={classNames(projectcss.all, sty.column1)}
                >
                  <Blob5Icon
                    className={classNames(projectcss.all, sty.svg__s6Yxb)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"counter9"}
                    data-plasmic-override={overrides.counter9}
                    className={classNames(projectcss.all, sty.counter9)}
                  >
                    <CountUp
                      className={classNames(
                        "__wab_instance",
                        sty.countUp__ocSag
                      )}
                      decimal={"." as const}
                      decimals={1 as const}
                      delay={1 as const}
                      duration={2.75 as const}
                      enableScrollSpy={true}
                      end={3.4 as const}
                      prefix={"" as const}
                      separator={"," as const}
                      start={0 as const}
                      suffix={"K" as const}
                      useEasing={true}
                    />
                  </div>
                  <div
                    data-plasmic-name={"title9"}
                    data-plasmic-override={overrides.title9}
                    className={classNames(projectcss.all, sty.title9)}
                  >
                    <div
                      data-plasmic-name={"title10"}
                      data-plasmic-override={overrides.title10}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.title10
                      )}
                    >
                      {"Twitter Followers"}
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"column2"}
                  data-plasmic-override={overrides.column2}
                  className={classNames(projectcss.all, sty.column2)}
                >
                  <Blob4Icon
                    className={classNames(projectcss.all, sty.svg__kfuTy)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"counter7"}
                    data-plasmic-override={overrides.counter7}
                    className={classNames(projectcss.all, sty.counter7)}
                  >
                    <CountUp
                      className={classNames(
                        "__wab_instance",
                        sty.countUp___0LgGf
                      )}
                      decimal={"." as const}
                      decimals={0 as const}
                      delay={1 as const}
                      duration={2.75 as const}
                      enableScrollSpy={true}
                      end={31 as const}
                      prefix={"" as const}
                      separator={"," as const}
                      start={0 as const}
                      suffix={"K" as const}
                      useEasing={true}
                    />
                  </div>
                  <div
                    data-plasmic-name={"title7"}
                    data-plasmic-override={overrides.title7}
                    className={classNames(projectcss.all, sty.title7)}
                  >
                    <div
                      data-plasmic-name={"title8"}
                      data-plasmic-override={overrides.title8}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.title8
                      )}
                    >
                      {"Plugin Installs"}
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"column3"}
                  data-plasmic-override={overrides.column3}
                  className={classNames(projectcss.all, sty.column3)}
                >
                  <Blob3Icon
                    className={classNames(projectcss.all, sty.svg___2Kt8R)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"counter5"}
                    data-plasmic-override={overrides.counter5}
                    className={classNames(projectcss.all, sty.counter5)}
                  >
                    <CountUp
                      className={classNames(
                        "__wab_instance",
                        sty.countUp___9TGhK
                      )}
                      decimal={"." as const}
                      decimals={0 as const}
                      delay={1 as const}
                      duration={2.75 as const}
                      enableScrollSpy={true}
                      end={172 as const}
                      prefix={"" as const}
                      separator={"," as const}
                      start={0 as const}
                      suffix={"K" as const}
                      useEasing={true}
                    />
                  </div>
                  <div
                    data-plasmic-name={"title5"}
                    data-plasmic-override={overrides.title5}
                    className={classNames(projectcss.all, sty.title5)}
                  >
                    <div
                      data-plasmic-name={"title6"}
                      data-plasmic-override={overrides.title6}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.title6
                      )}
                    >
                      {"File Duplicates"}
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"column4"}
                  data-plasmic-override={overrides.column4}
                  className={classNames(projectcss.all, sty.column4)}
                >
                  <Blob2Icon
                    className={classNames(projectcss.all, sty.svg__ciUeb)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"counter3"}
                    data-plasmic-override={overrides.counter3}
                    className={classNames(projectcss.all, sty.counter3)}
                  >
                    <CountUp
                      className={classNames(
                        "__wab_instance",
                        sty.countUp___6LA
                      )}
                      decimal={"." as const}
                      decimals={1 as const}
                      delay={1 as const}
                      duration={2.75 as const}
                      enableScrollSpy={true}
                      end={3.2 as const}
                      prefix={"" as const}
                      separator={"," as const}
                      start={0 as const}
                      suffix={"K" as const}
                      useEasing={true}
                    />
                  </div>
                  <div
                    data-plasmic-name={"title3"}
                    data-plasmic-override={overrides.title3}
                    className={classNames(projectcss.all, sty.title3)}
                  >
                    <div
                      data-plasmic-name={"title4"}
                      data-plasmic-override={overrides.title4}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.title4
                      )}
                    >
                      {"Figma Followers"}
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"column5"}
                  data-plasmic-override={overrides.column5}
                  className={classNames(projectcss.all, sty.column5)}
                >
                  <BlobIcon
                    className={classNames(projectcss.all, sty.svg__iln61)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"counter"}
                    data-plasmic-override={overrides.counter}
                    className={classNames(projectcss.all, sty.counter)}
                  >
                    <CountUp
                      className={classNames(
                        "__wab_instance",
                        sty.countUp__y6ZFt
                      )}
                      decimal={"." as const}
                      decimals={0 as const}
                      delay={1 as const}
                      duration={2.75 as const}
                      enableScrollSpy={true}
                      end={12 as const}
                      prefix={"" as const}
                      separator={"," as const}
                      start={0 as const}
                      suffix={"K" as const}
                      useEasing={true}
                    />
                  </div>
                  <div
                    data-plasmic-name={"title"}
                    data-plasmic-override={overrides.title}
                    className={classNames(projectcss.all, sty.title)}
                  >
                    <div
                      data-plasmic-name={"title2"}
                      data-plasmic-override={overrides.title2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.title2
                      )}
                    >
                      {"Likes"}
                    </div>
                  </div>
                </div>
              </div>
            ) : null}
            <Tabs
              data-plasmic-name={"tabs"}
              data-plasmic-override={overrides.tabs}
              className={classNames("__wab_instance", sty.tabs)}
              colorScheme={"orange" as const}
              direction={"rtl" as const}
              orientation={"horizontal" as const}
              size={"lg" as const}
              variant={"soft-rounded" as const}
            >
              <TabList
                data-plasmic-name={"tabList"}
                data-plasmic-override={overrides.tabList}
                className={classNames("__wab_instance", sty.tabList)}
              >
                <Tab className={classNames("__wab_instance", sty.tab__mg3Dr)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dvMuu
                    )}
                  >
                    {"My Story"}
                  </div>
                </Tab>
                <Tab className={classNames("__wab_instance", sty.tab__c9Ik0)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__meg56
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Why the name Mr. Biscuit?"
                      : "Why the name Mr. Biscuit?"}
                  </div>
                </Tab>
              </TabList>
              <TabPanels
                data-plasmic-name={"tabPanels"}
                data-plasmic-override={overrides.tabPanels}
                className={classNames("__wab_instance", sty.tabPanels)}
              >
                <TabPanel
                  className={classNames("__wab_instance", sty.tabPanel__arOn0)}
                >
                  <SuperEllipse
                    className={classNames(
                      "__wab_instance",
                      sty.superEllipse__rUfhZ
                    )}
                    r1={0 as const}
                    r2={0.13 as const}
                  >
                    <ParallaxWrapper
                      data-plasmic-name={"scrollParallax"}
                      data-plasmic-override={overrides.scrollParallax}
                      className={classNames(
                        "__wab_instance",
                        sty.scrollParallax
                      )}
                      speed={35 as const}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame1234"}
                        data-plasmic-override={overrides.frame1234}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame1234)}
                      >
                        <div
                          data-plasmic-name={"image34"}
                          data-plasmic-override={overrides.image34}
                          className={classNames(projectcss.all, sty.image34)}
                        />

                        <div
                          data-plasmic-name={"image36"}
                          data-plasmic-override={overrides.image36}
                          className={classNames(projectcss.all, sty.image36)}
                        />

                        <div
                          data-plasmic-name={"image35"}
                          data-plasmic-override={overrides.image35}
                          className={classNames(projectcss.all, sty.image35)}
                        />

                        <div
                          data-plasmic-name={"image37"}
                          data-plasmic-override={overrides.image37}
                          className={classNames(projectcss.all, sty.image37)}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__rNyB7)}
                          displayHeight={"245px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"245px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/mr_biscuit_site/images/image11.png",
                            fullWidth: 612,
                            fullHeight: 612,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__cIawc)}
                          displayHeight={"226px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"301px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/mr_biscuit_site/images/image4.png",
                            fullWidth: 612,
                            fullHeight: 459,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__zqEhs)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"245px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/mr_biscuit_site/images/image12.png",
                            fullWidth: 592,
                            fullHeight: 584,
                            aspectRatio: undefined
                          }}
                        />
                      </p.Stack>
                    </ParallaxWrapper>
                    <SuperEllipse
                      className={classNames(
                        "__wab_instance",
                        sty.superEllipse___3QpcI
                      )}
                      r1={0 as const}
                      r2={0.13 as const}
                    >
                      <SuperEllipse
                        className={classNames(
                          "__wab_instance",
                          sty.superEllipse__jzVeM
                        )}
                        r1={0 as const}
                        r2={0.13 as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vbPx
                          )}
                        >
                          {
                            "I was born in late 20th century Beijing, to a bourgeois family, my dad was a chief mining designer and my mom was a news journalist. \n\nFrom the age of 2, I was already learning classical Piano from reputable teachers, I played Mozart, Johann Strauss Jr, and Felix Mendelssohn. \n\nI was also granted some of the earliest computers that had access to the internet to play with all day. And my dad would teach me ins and outs of the operating system, software, and web browser. He also read me cutting-edge technology and science publications, while my mom feeds me on world politics and news. Those were my happiest days.\n\nThen at the age of 5, I was left behind to be raised by my grandparents in distant rural areas since my parents have to work very hard for business.\n\nIt was a huge setback for me, all of a sudden, I had no one to talk to, I felt like my brain was rusting away but there was nothing to be done. It was around this time I started talking to myself and grow a deeply introverted personality. I would repeatedly listen to the only piano tape I brought with me that plays the Lyphard Melodie album. \n\nTo make things worse, I have an aunt that have some conflicts with my mother, we live together in the same house, she would pinch my ear and warn me not to touch the appliances they bought, which includes the fridge and the TV. Despite this, all the kids in the village would come to visit my place and gaze at my computer, and I would share the games installed to let each of them play.\n\nI returned to downtown Beijing in my 2nd grade but things were hard and I was discriminated against by the teacher who called me a poor peasant kid on the first day of school. I got transferred back and forth between the city and farm schools 7 times from 1st grade to 9th grade.\n\nI had enough of that so I decided I would take control of my life and I go study in the United States for high school no matter what. Luckily my English was good and my mother was supportive. So I lived and studied in Champaign Illinois for my high school years. \n\nI've had a happy high school life, joined the varsity track and field team, sang in the church choir, made friends with black and Asian kids, and fell in love with a girl. But the good didn’t last, I soon learned that my mom’s new company went bankrupt, and owe a huge amount of loans to the bank. \n\nI returned to Beijing and soon dropped out of college and took a training class for iOS programming then found a job, but I didn't see my future in mathematics, but I found my passion in working with interfaces, so two years later, I became a UI Designer."
                          }
                        </div>
                      </SuperEllipse>
                    </SuperEllipse>
                  </SuperEllipse>
                </TabPanel>
                <TabPanel
                  className={classNames("__wab_instance", sty.tabPanel__ueyZy)}
                >
                  <SuperEllipse
                    className={classNames(
                      "__wab_instance",
                      sty.superEllipse__fI7Z
                    )}
                    r1={0 as const}
                    r2={0.13 as const}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame1235"}
                      data-plasmic-override={overrides.frame1235}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame1235)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__cEivD)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"313px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/mr_biscuit_site/images/image13.png",
                          fullWidth: 612,
                          fullHeight: 433,
                          aspectRatio: undefined
                        }}
                      />

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___4VfGm)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/mr_biscuit_site/images/image14.png",
                          fullWidth: 612,
                          fullHeight: 428,
                          aspectRatio: undefined
                        }}
                      />

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___0BPvM)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/mr_biscuit_site/images/image15.png",
                          fullWidth: 336,
                          fullHeight: 414,
                          aspectRatio: undefined
                        }}
                      />

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___3Yonu)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobile")
                            ? ("88px" as const)
                            : ("182px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/mr_biscuit_site/images/image16.png",
                          fullWidth: 830,
                          fullHeight: 758,
                          aspectRatio: undefined
                        }}
                      />
                    </p.Stack>
                    <SuperEllipse
                      className={classNames(
                        "__wab_instance",
                        sty.superEllipse__m3Mvh
                      )}
                      r1={0 as const}
                      r2={0.13 as const}
                    >
                      <SuperEllipse
                        className={classNames(
                          "__wab_instance",
                          sty.superEllipse__wfP6U
                        )}
                        r1={0 as const}
                        r2={0.13 as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9A2Zg
                          )}
                        >
                          {
                            'I\'ve come up with this "biscuit" alias when I was in the States some 10 years ago, as a sign of altruism, to constantly remind myself of non-ego-centric thinking and be helpful to others :) \n\nYou see, I studied in Champaign Illinois as a foreign exchange student during high school, and my American host family adopted 7 abandoned babies while they were traveling to my biological Country (PRC), some of them were hareliped and some were born special, so their biological parents (mostly farmers) didn\'t have enough money to pay for their medical treatments and they were left near river banks and sometimes forest roads, and in their little quilt there often were written the name of the baby and a thank you note that ends with something like "...but mommy loves you!". \n\nMy American host dad is/was lieutenant Patrick Muzzy who at the time served in the US armed corps in all of the major middle-eastern operations, they also have two kids of their own, and by the time I went into their family these 7 adopted babies were already aged 5 - 8 years old (now they are in college and the family adopted even more kids alike). So every weekend the whole family will be going to church, and the church people will hand out biscuits and wine to everyone on particular days like ThanksGiving (supposed to be bread but I don\'t know why there were biscuits, probably cheaper lol)  \n\nAnd I asked my American host parents for the reason behind this, and they said these were meant to represent the body and blood of Jesus as in:\nJesus demonstrated the significance of His blood as part of the Last Supper with His disciples. As the disciples sat together, Jesus said, " \'Take it and eat it, for this is my body\' " (Matthew 26:26). He then gave thanks and offered them the cup and said, " ‘Each of you drink from it, for this is my blood, which seals the covenant between God and his people. It is poured out to forgive the sins of many " (Matthew 26:27-28) \n\nWell, that combined with the everyday living with them deeply touched me, I can\'t say I believe in the Redeemer series or atheism, but I want to be the "biscuit" that reminds me of the goodness in humanity, and whenever I can, be altruistic and helpful to others. I feel like it\'s a responsibility to pay back what we take from the world :)'
                          }
                        </div>
                      </SuperEllipse>
                    </SuperEllipse>
                  </SuperEllipse>
                </TabPanel>
              </TabPanels>
            </Tabs>
            <ParsIcon
              className={classNames(projectcss.all, sty.svg__j3Udf)}
              role={"img"}
            />

            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox___1XXq)}>
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : true
                ) ? (
                  <ParsIcon
                    className={classNames(projectcss.all, sty.svg___2At1)}
                    role={"img"}
                  />
                ) : null}
              </div>
            ) : null}
          </p.Stack>
          <PersonalFooter
            data-plasmic-name={"personalFooter"}
            data-plasmic-override={overrides.personalFooter}
            className={classNames("__wab_instance", sty.personalFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "left",
    "frame1225",
    "right2",
    "hero",
    "right",
    "typewriter",
    "arrowReveal",
    "frame1177",
    "reveal",
    "buttonwrap",
    "superEllipseButton",
    "frame1181",
    "frame1176",
    "frame1178",
    "frame",
    "frame1179",
    "image",
    "frame1180",
    "page1",
    "blackNextjs",
    "nextBlack",
    "separator2",
    "side",
    "content",
    "counters1",
    "column1",
    "counter9",
    "title9",
    "title10",
    "column2",
    "counter7",
    "title7",
    "title8",
    "column3",
    "counter5",
    "title5",
    "title6",
    "column4",
    "counter3",
    "title3",
    "title4",
    "column5",
    "counter",
    "title",
    "title2",
    "tabs",
    "tabList",
    "tabPanels",
    "scrollParallax",
    "frame1234",
    "image34",
    "image36",
    "image35",
    "image37",
    "frame1235",
    "personalFooter"
  ],
  header: ["header", "left", "frame1225", "right2"],
  left: ["left", "frame1225"],
  frame1225: ["frame1225"],
  right2: ["right2"],
  hero: [
    "hero",
    "right",
    "typewriter",
    "arrowReveal",
    "frame1177",
    "reveal",
    "buttonwrap",
    "superEllipseButton",
    "frame1181",
    "frame1176",
    "frame1178",
    "frame",
    "frame1179",
    "image",
    "frame1180",
    "page1",
    "blackNextjs",
    "nextBlack"
  ],
  right: ["right", "typewriter"],
  typewriter: ["typewriter"],
  arrowReveal: ["arrowReveal"],
  frame1177: ["frame1177"],
  reveal: [
    "reveal",
    "buttonwrap",
    "superEllipseButton",
    "frame1181",
    "frame1176",
    "frame1178",
    "frame",
    "frame1179",
    "image",
    "frame1180",
    "page1",
    "blackNextjs",
    "nextBlack"
  ],
  buttonwrap: ["buttonwrap", "superEllipseButton"],
  superEllipseButton: ["superEllipseButton"],
  frame1181: [
    "frame1181",
    "frame1176",
    "frame1178",
    "frame",
    "frame1179",
    "image",
    "frame1180",
    "page1",
    "blackNextjs",
    "nextBlack"
  ],
  frame1176: ["frame1176", "frame1178", "frame"],
  frame1178: ["frame1178", "frame"],
  frame: ["frame"],
  frame1179: ["frame1179", "image"],
  image: ["image"],
  frame1180: ["frame1180", "page1", "blackNextjs", "nextBlack"],
  page1: ["page1", "blackNextjs", "nextBlack"],
  blackNextjs: ["blackNextjs", "nextBlack"],
  nextBlack: ["nextBlack"],
  separator2: ["separator2"],
  side: ["side"],
  content: [
    "content",
    "counters1",
    "column1",
    "counter9",
    "title9",
    "title10",
    "column2",
    "counter7",
    "title7",
    "title8",
    "column3",
    "counter5",
    "title5",
    "title6",
    "column4",
    "counter3",
    "title3",
    "title4",
    "column5",
    "counter",
    "title",
    "title2",
    "tabs",
    "tabList",
    "tabPanels",
    "scrollParallax",
    "frame1234",
    "image34",
    "image36",
    "image35",
    "image37",
    "frame1235"
  ],
  counters1: [
    "counters1",
    "column1",
    "counter9",
    "title9",
    "title10",
    "column2",
    "counter7",
    "title7",
    "title8",
    "column3",
    "counter5",
    "title5",
    "title6",
    "column4",
    "counter3",
    "title3",
    "title4",
    "column5",
    "counter",
    "title",
    "title2"
  ],
  column1: ["column1", "counter9", "title9", "title10"],
  counter9: ["counter9"],
  title9: ["title9", "title10"],
  title10: ["title10"],
  column2: ["column2", "counter7", "title7", "title8"],
  counter7: ["counter7"],
  title7: ["title7", "title8"],
  title8: ["title8"],
  column3: ["column3", "counter5", "title5", "title6"],
  counter5: ["counter5"],
  title5: ["title5", "title6"],
  title6: ["title6"],
  column4: ["column4", "counter3", "title3", "title4"],
  counter3: ["counter3"],
  title3: ["title3", "title4"],
  title4: ["title4"],
  column5: ["column5", "counter", "title", "title2"],
  counter: ["counter"],
  title: ["title", "title2"],
  title2: ["title2"],
  tabs: [
    "tabs",
    "tabList",
    "tabPanels",
    "scrollParallax",
    "frame1234",
    "image34",
    "image36",
    "image35",
    "image37",
    "frame1235"
  ],
  tabList: ["tabList"],
  tabPanels: [
    "tabPanels",
    "scrollParallax",
    "frame1234",
    "image34",
    "image36",
    "image35",
    "image37",
    "frame1235"
  ],
  scrollParallax: [
    "scrollParallax",
    "frame1234",
    "image34",
    "image36",
    "image35",
    "image37"
  ],
  frame1234: ["frame1234", "image34", "image36", "image35", "image37"],
  image34: ["image34"],
  image36: ["image36"],
  image35: ["image35"],
  image37: ["image37"],
  frame1235: ["frame1235"],
  personalFooter: ["personalFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  left: "a";
  frame1225: "div";
  right2: "div";
  hero: "div";
  right: "div";
  typewriter: typeof Typewriter;
  arrowReveal: typeof Reveal;
  frame1177: "div";
  reveal: typeof Reveal;
  buttonwrap: "a";
  superEllipseButton: typeof SuperEllipseButton;
  frame1181: "div";
  frame1176: "div";
  frame1178: "div";
  frame: "div";
  frame1179: "div";
  image: "div";
  frame1180: "div";
  page1: "div";
  blackNextjs: "div";
  nextBlack: "div";
  separator2: "div";
  side: "div";
  content: "div";
  counters1: "div";
  column1: "div";
  counter9: "div";
  title9: "div";
  title10: "div";
  column2: "div";
  counter7: "div";
  title7: "div";
  title8: "div";
  column3: "div";
  counter5: "div";
  title5: "div";
  title6: "div";
  column4: "div";
  counter3: "div";
  title3: "div";
  title4: "div";
  column5: "div";
  counter: "div";
  title: "div";
  title2: "div";
  tabs: typeof Tabs;
  tabList: typeof TabList;
  tabPanels: typeof TabPanels;
  scrollParallax: typeof ParallaxWrapper;
  frame1234: "div";
  image34: "div";
  image36: "div";
  image35: "div";
  image37: "div";
  frame1235: "div";
  personalFooter: typeof PersonalFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAbout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAbout__VariantsArgs;
    args?: PlasmicAbout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAbout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAbout__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAbout__ArgProps,
          internalVariantPropNames: PlasmicAbout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAbout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAbout";
  } else {
    func.displayName = `PlasmicAbout.${nodeName}`;
  }
  return func;
}

export const PlasmicAbout = Object.assign(
  // Top-level PlasmicAbout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    left: makeNodeComponent("left"),
    frame1225: makeNodeComponent("frame1225"),
    right2: makeNodeComponent("right2"),
    hero: makeNodeComponent("hero"),
    right: makeNodeComponent("right"),
    typewriter: makeNodeComponent("typewriter"),
    arrowReveal: makeNodeComponent("arrowReveal"),
    frame1177: makeNodeComponent("frame1177"),
    reveal: makeNodeComponent("reveal"),
    buttonwrap: makeNodeComponent("buttonwrap"),
    superEllipseButton: makeNodeComponent("superEllipseButton"),
    frame1181: makeNodeComponent("frame1181"),
    frame1176: makeNodeComponent("frame1176"),
    frame1178: makeNodeComponent("frame1178"),
    frame: makeNodeComponent("frame"),
    frame1179: makeNodeComponent("frame1179"),
    image: makeNodeComponent("image"),
    frame1180: makeNodeComponent("frame1180"),
    page1: makeNodeComponent("page1"),
    blackNextjs: makeNodeComponent("blackNextjs"),
    nextBlack: makeNodeComponent("nextBlack"),
    separator2: makeNodeComponent("separator2"),
    side: makeNodeComponent("side"),
    content: makeNodeComponent("content"),
    counters1: makeNodeComponent("counters1"),
    column1: makeNodeComponent("column1"),
    counter9: makeNodeComponent("counter9"),
    title9: makeNodeComponent("title9"),
    title10: makeNodeComponent("title10"),
    column2: makeNodeComponent("column2"),
    counter7: makeNodeComponent("counter7"),
    title7: makeNodeComponent("title7"),
    title8: makeNodeComponent("title8"),
    column3: makeNodeComponent("column3"),
    counter5: makeNodeComponent("counter5"),
    title5: makeNodeComponent("title5"),
    title6: makeNodeComponent("title6"),
    column4: makeNodeComponent("column4"),
    counter3: makeNodeComponent("counter3"),
    title3: makeNodeComponent("title3"),
    title4: makeNodeComponent("title4"),
    column5: makeNodeComponent("column5"),
    counter: makeNodeComponent("counter"),
    title: makeNodeComponent("title"),
    title2: makeNodeComponent("title2"),
    tabs: makeNodeComponent("tabs"),
    tabList: makeNodeComponent("tabList"),
    tabPanels: makeNodeComponent("tabPanels"),
    scrollParallax: makeNodeComponent("scrollParallax"),
    frame1234: makeNodeComponent("frame1234"),
    image34: makeNodeComponent("image34"),
    image36: makeNodeComponent("image36"),
    image35: makeNodeComponent("image35"),
    image37: makeNodeComponent("image37"),
    frame1235: makeNodeComponent("frame1235"),
    personalFooter: makeNodeComponent("personalFooter"),

    // Metadata about props expected for PlasmicAbout
    internalVariantProps: PlasmicAbout__VariantProps,
    internalArgProps: PlasmicAbout__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAbout;
/* prettier-ignore-end */
