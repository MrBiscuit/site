// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 56iVbBJXbx9hFxysoAGHJC
// Component: 6TArvj3yYs
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_outline_to_single_stroke.module.css"; // plasmic-import: 56iVbBJXbx9hFxysoAGHJC/projectcss
import sty from "./PlasmicBlockquote.module.css"; // plasmic-import: 6TArvj3yYs/css

export type PlasmicBlockquote__VariantMembers = {};

export type PlasmicBlockquote__VariantsArgs = {};
type VariantPropType = keyof PlasmicBlockquote__VariantsArgs;
export const PlasmicBlockquote__VariantProps = new Array<VariantPropType>();

export type PlasmicBlockquote__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicBlockquote__ArgsType;
export const PlasmicBlockquote__ArgProps = new Array<ArgPropType>("children");

export type PlasmicBlockquote__OverridesType = {
  root?: p.Flex<"blockquote">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultBlockquoteProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicBlockquote__RenderFunc(props: {
  variants: PlasmicBlockquote__VariantsArgs;
  args: PlasmicBlockquote__ArgsType;
  overrides: PlasmicBlockquote__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <p.Stack
      as={"blockquote"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents:
            "Tip: You don’t have to write the unit (px), just type in a number for simplicity. In fact, you can even leave it empty all together, if the parameter is omitted or left empty, the plugin will try to infer it’s stroke weight, but sometimes this can be far from accurate as the drawing can be quite complex. So it is recommanded that you enter the stroke weight of your drawing if possible.",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "blockquote";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBlockquote__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBlockquote__VariantsArgs;
    args?: PlasmicBlockquote__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBlockquote__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBlockquote__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBlockquote__ArgProps,
          internalVariantPropNames: PlasmicBlockquote__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBlockquote__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBlockquote";
  } else {
    func.displayName = `PlasmicBlockquote.${nodeName}`;
  }
  return func;
}

export const PlasmicBlockquote = Object.assign(
  // Top-level PlasmicBlockquote renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicBlockquote
    internalVariantProps: PlasmicBlockquote__VariantProps,
    internalArgProps: PlasmicBlockquote__ArgProps
  }
);

export default PlasmicBlockquote;
/* prettier-ignore-end */
