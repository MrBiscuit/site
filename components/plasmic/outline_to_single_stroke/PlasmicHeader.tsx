// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 56iVbBJXbx9hFxysoAGHJC
// Component: 26vIhJdZCw
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Home from "../../Home"; // plasmic-import: AGUaLB6xXF/component
import LinkButton from "../../LinkButton"; // plasmic-import: 3IRnWGuOAs/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_outline_to_single_stroke.module.css"; // plasmic-import: 56iVbBJXbx9hFxysoAGHJC/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: 26vIhJdZCw/css

export type PlasmicHeader__VariantMembers = {};

export type PlasmicHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>();

export type PlasmicHeader__ArgsType = {
  navSiteNavSiteInternal?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>(
  "navSiteNavSiteInternal"
);

export type PlasmicHeader__OverridesType = {
  root?: p.Flex<"div">;
  headerWrapperWrapper?: p.Flex<"div">;
  home?: p.Flex<typeof Home>;
  navSiteNavSiteInternal?: p.Flex<"div">;
};

export interface DefaultHeaderProps {
  navSiteNavSiteInternal?: React.ReactNode;
  className?: string;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"headerWrapperWrapper"}
        data-plasmic-override={overrides.headerWrapperWrapper}
        className={classNames(
          projectcss.all,
          sty.headerWrapperWrapper,
          "headerWrapper wrapper" as const
        )}
      >
        <Home
          data-plasmic-name={"home"}
          data-plasmic-override={overrides.home}
          className={classNames("__wab_instance", sty.home)}
        />

        <p.Stack
          as={"div"}
          data-plasmic-name={"navSiteNavSiteInternal"}
          data-plasmic-override={overrides.navSiteNavSiteInternal}
          hasGap={true}
          className={classNames(
            projectcss.all,
            sty.navSiteNavSiteInternal,
            "nav-site nav-site-internal" as const
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <LinkButton
                  className={classNames(
                    "__wab_instance",
                    sty.linkButton___18V6G
                  )}
                />

                <LinkButton
                  className={classNames(
                    "__wab_instance",
                    sty.linkButton__g7EeH
                  )}
                >
                  {"Tutorial"}
                </LinkButton>

                <LinkButton
                  className={classNames(
                    "__wab_instance",
                    sty.linkButton__anOsk
                  )}
                >
                  {"Updates"}
                </LinkButton>
              </React.Fragment>
            ),
            value: args.navSiteNavSiteInternal
          })}
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "headerWrapperWrapper", "home", "navSiteNavSiteInternal"],
  headerWrapperWrapper: [
    "headerWrapperWrapper",
    "home",
    "navSiteNavSiteInternal"
  ],
  home: ["home"],
  navSiteNavSiteInternal: ["navSiteNavSiteInternal"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerWrapperWrapper: "div";
  home: typeof Home;
  navSiteNavSiteInternal: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerWrapperWrapper: makeNodeComponent("headerWrapperWrapper"),
    home: makeNodeComponent("home"),
    navSiteNavSiteInternal: makeNodeComponent("navSiteNavSiteInternal"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
